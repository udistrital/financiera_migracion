// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package financiera_migr.ajuste_cdp_solicitud_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ajuste_cdp_solicitud Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class ajuste_cdp_solicitud implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(curr_id != null){
				
					this.setProperty("curr_id", curr_id.toString());
				
			}
			
		}

public Integer curr_id;
public Integer getCurr_id(){
	return this.curr_id;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ajuste_cdp_solicitud";
	private final String projectName = "FINANCIERA_MIGR";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ajuste_cdp_solicitud.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ajuste_cdp_solicitud.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class salida_financiera_disponibilidad_proceso_externoStruct implements routines.system.IPersistableRow<salida_financiera_disponibilidad_proceso_externoStruct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public int tipo_disponibilidad;

				public int getTipo_disponibilidad () {
					return this.tipo_disponibilidad;
				}
				
			    public int proceso_externo;

				public int getProceso_externo () {
					return this.proceso_externo;
				}
				
			    public int disponibilidad;

				public int getDisponibilidad () {
					return this.disponibilidad;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final salida_financiera_disponibilidad_proceso_externoStruct other = (salida_financiera_disponibilidad_proceso_externoStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(salida_financiera_disponibilidad_proceso_externoStruct other) {

		other.id = this.id;
	            other.tipo_disponibilidad = this.tipo_disponibilidad;
	            other.proceso_externo = this.proceso_externo;
	            other.disponibilidad = this.disponibilidad;
	            
	}

	public void copyKeysDataTo(salida_financiera_disponibilidad_proceso_externoStruct other) {

		other.id = this.id;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
			        this.tipo_disponibilidad = dis.readInt();
					
			        this.proceso_externo = dis.readInt();
					
			        this.disponibilidad = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// int
				
		            	dos.writeInt(this.tipo_disponibilidad);
					
					// int
				
		            	dos.writeInt(this.proceso_externo);
					
					// int
				
		            	dos.writeInt(this.disponibilidad);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",tipo_disponibilidad="+String.valueOf(tipo_disponibilidad));
		sb.append(",proceso_externo="+String.valueOf(proceso_externo));
		sb.append(",disponibilidad="+String.valueOf(disponibilidad));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salida_financiera_disponibilidad_proceso_externoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public int numero;

				public int getNumero () {
					return this.numero;
				}
				
			    public BigDecimal vigencia;

				public BigDecimal getVigencia () {
					return this.vigencia;
				}
				
			    public java.util.Date fecha_solicitud;

				public java.util.Date getFecha_solicitud () {
					return this.fecha_solicitud;
				}
				
			    public int necesidad;

				public int getNecesidad () {
					return this.necesidad;
				}
				
			    public boolean expedida;

				public boolean getExpedida () {
					return this.expedida;
				}
				
			    public String justificacion_rechazo;

				public String getJustificacion_rechazo () {
					return this.justificacion_rechazo;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
			        this.numero = dis.readInt();
					
						this.vigencia = (BigDecimal) dis.readObject();
					
					this.fecha_solicitud = readDate(dis);
					
			        this.necesidad = dis.readInt();
					
			        this.expedida = dis.readBoolean();
					
					this.justificacion_rechazo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// int
				
		            	dos.writeInt(this.numero);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vigencia);
					
					// java.util.Date
				
						writeDate(this.fecha_solicitud,dos);
					
					// int
				
		            	dos.writeInt(this.necesidad);
					
					// boolean
				
		            	dos.writeBoolean(this.expedida);
					
					// String
				
						writeString(this.justificacion_rechazo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",numero="+String.valueOf(numero));
		sb.append(",vigencia="+String.valueOf(vigencia));
		sb.append(",fecha_solicitud="+String.valueOf(fecha_solicitud));
		sb.append(",necesidad="+String.valueOf(necesidad));
		sb.append(",expedida="+String.valueOf(expedida));
		sb.append(",justificacion_rechazo="+justificacion_rechazo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salida_administrativa_solicitud_disponibilidadStruct implements routines.system.IPersistableRow<salida_administrativa_solicitud_disponibilidadStruct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public int numero;

				public int getNumero () {
					return this.numero;
				}
				
			    public BigDecimal vigencia;

				public BigDecimal getVigencia () {
					return this.vigencia;
				}
				
			    public java.util.Date fecha_solicitud;

				public java.util.Date getFecha_solicitud () {
					return this.fecha_solicitud;
				}
				
			    public int necesidad;

				public int getNecesidad () {
					return this.necesidad;
				}
				
			    public boolean expedida;

				public boolean getExpedida () {
					return this.expedida;
				}
				
			    public String justificacion_rechazo;

				public String getJustificacion_rechazo () {
					return this.justificacion_rechazo;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final salida_administrativa_solicitud_disponibilidadStruct other = (salida_administrativa_solicitud_disponibilidadStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(salida_administrativa_solicitud_disponibilidadStruct other) {

		other.id = this.id;
	            other.numero = this.numero;
	            other.vigencia = this.vigencia;
	            other.fecha_solicitud = this.fecha_solicitud;
	            other.necesidad = this.necesidad;
	            other.expedida = this.expedida;
	            other.justificacion_rechazo = this.justificacion_rechazo;
	            
	}

	public void copyKeysDataTo(salida_administrativa_solicitud_disponibilidadStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
			        this.numero = dis.readInt();
					
						this.vigencia = (BigDecimal) dis.readObject();
					
					this.fecha_solicitud = readDate(dis);
					
			        this.necesidad = dis.readInt();
					
			        this.expedida = dis.readBoolean();
					
					this.justificacion_rechazo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// int
				
		            	dos.writeInt(this.numero);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vigencia);
					
					// java.util.Date
				
						writeDate(this.fecha_solicitud,dos);
					
					// int
				
		            	dos.writeInt(this.necesidad);
					
					// boolean
				
		            	dos.writeBoolean(this.expedida);
					
					// String
				
						writeString(this.justificacion_rechazo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",numero="+String.valueOf(numero));
		sb.append(",vigencia="+String.valueOf(vigencia));
		sb.append(",fecha_solicitud="+String.valueOf(fecha_solicitud));
		sb.append(",necesidad="+String.valueOf(necesidad));
		sb.append(",expedida="+String.valueOf(expedida));
		sb.append(",justificacion_rechazo="+justificacion_rechazo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salida_administrativa_solicitud_disponibilidadStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public Integer numero;

				public Integer getNumero () {
					return this.numero;
				}
				
			    public BigDecimal vigencia;

				public BigDecimal getVigencia () {
					return this.vigencia;
				}
				
			    public String objeto;

				public String getObjeto () {
					return this.objeto;
				}
				
			    public java.util.Date fecha_solicitud;

				public java.util.Date getFecha_solicitud () {
					return this.fecha_solicitud;
				}
				
			    public BigDecimal valor;

				public BigDecimal getValor () {
					return this.valor;
				}
				
			    public String justificacion;

				public String getJustificacion () {
					return this.justificacion;
				}
				
			    public int unidad_ejecutora;

				public int getUnidad_ejecutora () {
					return this.unidad_ejecutora;
				}
				
			    public BigDecimal dias_duracion;

				public BigDecimal getDias_duracion () {
					return this.dias_duracion;
				}
				
			    public boolean unico_pago;

				public boolean getUnico_pago () {
					return this.unico_pago;
				}
				
			    public boolean agotar_presupuesto;

				public boolean getAgotar_presupuesto () {
					return this.agotar_presupuesto;
				}
				
			    public int modalidad_seleccion;

				public int getModalidad_seleccion () {
					return this.modalidad_seleccion;
				}
				
			    public int tipo_contrato_necesidad;

				public int getTipo_contrato_necesidad () {
					return this.tipo_contrato_necesidad;
				}
				
			    public int plan_anual_adquisiciones;

				public int getPlan_anual_adquisiciones () {
					return this.plan_anual_adquisiciones;
				}
				
			    public String estudio_mercado;

				public String getEstudio_mercado () {
					return this.estudio_mercado;
				}
				
			    public int tipo_financiacion_necesidad;

				public int getTipo_financiacion_necesidad () {
					return this.tipo_financiacion_necesidad;
				}
				
			    public String analisis_riesgo;

				public String getAnalisis_riesgo () {
					return this.analisis_riesgo;
				}
				
			    public int numero_elaboracion;

				public int getNumero_elaboracion () {
					return this.numero_elaboracion;
				}
				
			    public java.util.Date fecha_modificacion;

				public java.util.Date getFecha_modificacion () {
					return this.fecha_modificacion;
				}
				
			    public int estado_necesidad;

				public int getEstado_necesidad () {
					return this.estado_necesidad;
				}
				
			    public int supervisor;

				public int getSupervisor () {
					return this.supervisor;
				}
				
			    public int tipo_necesidad;

				public int getTipo_necesidad () {
					return this.tipo_necesidad;
				}
				
			    public String justificacion_rechazo;

				public String getJustificacion_rechazo () {
					return this.justificacion_rechazo;
				}
				
			    public String justificacion_anulacion;

				public String getJustificacion_anulacion () {
					return this.justificacion_anulacion;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
						this.numero = readInteger(dis);
					
						this.vigencia = (BigDecimal) dis.readObject();
					
					this.objeto = readString(dis);
					
					this.fecha_solicitud = readDate(dis);
					
						this.valor = (BigDecimal) dis.readObject();
					
					this.justificacion = readString(dis);
					
			        this.unidad_ejecutora = dis.readInt();
					
						this.dias_duracion = (BigDecimal) dis.readObject();
					
			        this.unico_pago = dis.readBoolean();
					
			        this.agotar_presupuesto = dis.readBoolean();
					
			        this.modalidad_seleccion = dis.readInt();
					
			        this.tipo_contrato_necesidad = dis.readInt();
					
			        this.plan_anual_adquisiciones = dis.readInt();
					
					this.estudio_mercado = readString(dis);
					
			        this.tipo_financiacion_necesidad = dis.readInt();
					
					this.analisis_riesgo = readString(dis);
					
			        this.numero_elaboracion = dis.readInt();
					
					this.fecha_modificacion = readDate(dis);
					
			        this.estado_necesidad = dis.readInt();
					
			        this.supervisor = dis.readInt();
					
			        this.tipo_necesidad = dis.readInt();
					
					this.justificacion_rechazo = readString(dis);
					
					this.justificacion_anulacion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// Integer
				
						writeInteger(this.numero,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vigencia);
					
					// String
				
						writeString(this.objeto,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_solicitud,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.valor);
					
					// String
				
						writeString(this.justificacion,dos);
					
					// int
				
		            	dos.writeInt(this.unidad_ejecutora);
					
					// BigDecimal
				
       			    	dos.writeObject(this.dias_duracion);
					
					// boolean
				
		            	dos.writeBoolean(this.unico_pago);
					
					// boolean
				
		            	dos.writeBoolean(this.agotar_presupuesto);
					
					// int
				
		            	dos.writeInt(this.modalidad_seleccion);
					
					// int
				
		            	dos.writeInt(this.tipo_contrato_necesidad);
					
					// int
				
		            	dos.writeInt(this.plan_anual_adquisiciones);
					
					// String
				
						writeString(this.estudio_mercado,dos);
					
					// int
				
		            	dos.writeInt(this.tipo_financiacion_necesidad);
					
					// String
				
						writeString(this.analisis_riesgo,dos);
					
					// int
				
		            	dos.writeInt(this.numero_elaboracion);
					
					// java.util.Date
				
						writeDate(this.fecha_modificacion,dos);
					
					// int
				
		            	dos.writeInt(this.estado_necesidad);
					
					// int
				
		            	dos.writeInt(this.supervisor);
					
					// int
				
		            	dos.writeInt(this.tipo_necesidad);
					
					// String
				
						writeString(this.justificacion_rechazo,dos);
					
					// String
				
						writeString(this.justificacion_anulacion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",numero="+String.valueOf(numero));
		sb.append(",vigencia="+String.valueOf(vigencia));
		sb.append(",objeto="+objeto);
		sb.append(",fecha_solicitud="+String.valueOf(fecha_solicitud));
		sb.append(",valor="+String.valueOf(valor));
		sb.append(",justificacion="+justificacion);
		sb.append(",unidad_ejecutora="+String.valueOf(unidad_ejecutora));
		sb.append(",dias_duracion="+String.valueOf(dias_duracion));
		sb.append(",unico_pago="+String.valueOf(unico_pago));
		sb.append(",agotar_presupuesto="+String.valueOf(agotar_presupuesto));
		sb.append(",modalidad_seleccion="+String.valueOf(modalidad_seleccion));
		sb.append(",tipo_contrato_necesidad="+String.valueOf(tipo_contrato_necesidad));
		sb.append(",plan_anual_adquisiciones="+String.valueOf(plan_anual_adquisiciones));
		sb.append(",estudio_mercado="+estudio_mercado);
		sb.append(",tipo_financiacion_necesidad="+String.valueOf(tipo_financiacion_necesidad));
		sb.append(",analisis_riesgo="+analisis_riesgo);
		sb.append(",numero_elaboracion="+String.valueOf(numero_elaboracion));
		sb.append(",fecha_modificacion="+String.valueOf(fecha_modificacion));
		sb.append(",estado_necesidad="+String.valueOf(estado_necesidad));
		sb.append(",supervisor="+String.valueOf(supervisor));
		sb.append(",tipo_necesidad="+String.valueOf(tipo_necesidad));
		sb.append(",justificacion_rechazo="+justificacion_rechazo);
		sb.append(",justificacion_anulacion="+justificacion_anulacion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_1Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public Integer numero;

				public Integer getNumero () {
					return this.numero;
				}
				
			    public BigDecimal vigencia;

				public BigDecimal getVigencia () {
					return this.vigencia;
				}
				
			    public String objeto;

				public String getObjeto () {
					return this.objeto;
				}
				
			    public java.util.Date fecha_solicitud;

				public java.util.Date getFecha_solicitud () {
					return this.fecha_solicitud;
				}
				
			    public BigDecimal valor;

				public BigDecimal getValor () {
					return this.valor;
				}
				
			    public String justificacion;

				public String getJustificacion () {
					return this.justificacion;
				}
				
			    public int unidad_ejecutora;

				public int getUnidad_ejecutora () {
					return this.unidad_ejecutora;
				}
				
			    public BigDecimal dias_duracion;

				public BigDecimal getDias_duracion () {
					return this.dias_duracion;
				}
				
			    public boolean unico_pago;

				public boolean getUnico_pago () {
					return this.unico_pago;
				}
				
			    public boolean agotar_presupuesto;

				public boolean getAgotar_presupuesto () {
					return this.agotar_presupuesto;
				}
				
			    public int modalidad_seleccion;

				public int getModalidad_seleccion () {
					return this.modalidad_seleccion;
				}
				
			    public int tipo_contrato_necesidad;

				public int getTipo_contrato_necesidad () {
					return this.tipo_contrato_necesidad;
				}
				
			    public int plan_anual_adquisiciones;

				public int getPlan_anual_adquisiciones () {
					return this.plan_anual_adquisiciones;
				}
				
			    public String estudio_mercado;

				public String getEstudio_mercado () {
					return this.estudio_mercado;
				}
				
			    public int tipo_financiacion_necesidad;

				public int getTipo_financiacion_necesidad () {
					return this.tipo_financiacion_necesidad;
				}
				
			    public String analisis_riesgo;

				public String getAnalisis_riesgo () {
					return this.analisis_riesgo;
				}
				
			    public int numero_elaboracion;

				public int getNumero_elaboracion () {
					return this.numero_elaboracion;
				}
				
			    public java.util.Date fecha_modificacion;

				public java.util.Date getFecha_modificacion () {
					return this.fecha_modificacion;
				}
				
			    public int estado_necesidad;

				public int getEstado_necesidad () {
					return this.estado_necesidad;
				}
				
			    public int supervisor;

				public int getSupervisor () {
					return this.supervisor;
				}
				
			    public int tipo_necesidad;

				public int getTipo_necesidad () {
					return this.tipo_necesidad;
				}
				
			    public String justificacion_rechazo;

				public String getJustificacion_rechazo () {
					return this.justificacion_rechazo;
				}
				
			    public String justificacion_anulacion;

				public String getJustificacion_anulacion () {
					return this.justificacion_anulacion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tPostgresqlInput_1Struct other = (after_tPostgresqlInput_1Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tPostgresqlInput_1Struct other) {

		other.id = this.id;
	            other.numero = this.numero;
	            other.vigencia = this.vigencia;
	            other.objeto = this.objeto;
	            other.fecha_solicitud = this.fecha_solicitud;
	            other.valor = this.valor;
	            other.justificacion = this.justificacion;
	            other.unidad_ejecutora = this.unidad_ejecutora;
	            other.dias_duracion = this.dias_duracion;
	            other.unico_pago = this.unico_pago;
	            other.agotar_presupuesto = this.agotar_presupuesto;
	            other.modalidad_seleccion = this.modalidad_seleccion;
	            other.tipo_contrato_necesidad = this.tipo_contrato_necesidad;
	            other.plan_anual_adquisiciones = this.plan_anual_adquisiciones;
	            other.estudio_mercado = this.estudio_mercado;
	            other.tipo_financiacion_necesidad = this.tipo_financiacion_necesidad;
	            other.analisis_riesgo = this.analisis_riesgo;
	            other.numero_elaboracion = this.numero_elaboracion;
	            other.fecha_modificacion = this.fecha_modificacion;
	            other.estado_necesidad = this.estado_necesidad;
	            other.supervisor = this.supervisor;
	            other.tipo_necesidad = this.tipo_necesidad;
	            other.justificacion_rechazo = this.justificacion_rechazo;
	            other.justificacion_anulacion = this.justificacion_anulacion;
	            
	}

	public void copyKeysDataTo(after_tPostgresqlInput_1Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
						this.numero = readInteger(dis);
					
						this.vigencia = (BigDecimal) dis.readObject();
					
					this.objeto = readString(dis);
					
					this.fecha_solicitud = readDate(dis);
					
						this.valor = (BigDecimal) dis.readObject();
					
					this.justificacion = readString(dis);
					
			        this.unidad_ejecutora = dis.readInt();
					
						this.dias_duracion = (BigDecimal) dis.readObject();
					
			        this.unico_pago = dis.readBoolean();
					
			        this.agotar_presupuesto = dis.readBoolean();
					
			        this.modalidad_seleccion = dis.readInt();
					
			        this.tipo_contrato_necesidad = dis.readInt();
					
			        this.plan_anual_adquisiciones = dis.readInt();
					
					this.estudio_mercado = readString(dis);
					
			        this.tipo_financiacion_necesidad = dis.readInt();
					
					this.analisis_riesgo = readString(dis);
					
			        this.numero_elaboracion = dis.readInt();
					
					this.fecha_modificacion = readDate(dis);
					
			        this.estado_necesidad = dis.readInt();
					
			        this.supervisor = dis.readInt();
					
			        this.tipo_necesidad = dis.readInt();
					
					this.justificacion_rechazo = readString(dis);
					
					this.justificacion_anulacion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// Integer
				
						writeInteger(this.numero,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vigencia);
					
					// String
				
						writeString(this.objeto,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_solicitud,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.valor);
					
					// String
				
						writeString(this.justificacion,dos);
					
					// int
				
		            	dos.writeInt(this.unidad_ejecutora);
					
					// BigDecimal
				
       			    	dos.writeObject(this.dias_duracion);
					
					// boolean
				
		            	dos.writeBoolean(this.unico_pago);
					
					// boolean
				
		            	dos.writeBoolean(this.agotar_presupuesto);
					
					// int
				
		            	dos.writeInt(this.modalidad_seleccion);
					
					// int
				
		            	dos.writeInt(this.tipo_contrato_necesidad);
					
					// int
				
		            	dos.writeInt(this.plan_anual_adquisiciones);
					
					// String
				
						writeString(this.estudio_mercado,dos);
					
					// int
				
		            	dos.writeInt(this.tipo_financiacion_necesidad);
					
					// String
				
						writeString(this.analisis_riesgo,dos);
					
					// int
				
		            	dos.writeInt(this.numero_elaboracion);
					
					// java.util.Date
				
						writeDate(this.fecha_modificacion,dos);
					
					// int
				
		            	dos.writeInt(this.estado_necesidad);
					
					// int
				
		            	dos.writeInt(this.supervisor);
					
					// int
				
		            	dos.writeInt(this.tipo_necesidad);
					
					// String
				
						writeString(this.justificacion_rechazo,dos);
					
					// String
				
						writeString(this.justificacion_anulacion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",numero="+String.valueOf(numero));
		sb.append(",vigencia="+String.valueOf(vigencia));
		sb.append(",objeto="+objeto);
		sb.append(",fecha_solicitud="+String.valueOf(fecha_solicitud));
		sb.append(",valor="+String.valueOf(valor));
		sb.append(",justificacion="+justificacion);
		sb.append(",unidad_ejecutora="+String.valueOf(unidad_ejecutora));
		sb.append(",dias_duracion="+String.valueOf(dias_duracion));
		sb.append(",unico_pago="+String.valueOf(unico_pago));
		sb.append(",agotar_presupuesto="+String.valueOf(agotar_presupuesto));
		sb.append(",modalidad_seleccion="+String.valueOf(modalidad_seleccion));
		sb.append(",tipo_contrato_necesidad="+String.valueOf(tipo_contrato_necesidad));
		sb.append(",plan_anual_adquisiciones="+String.valueOf(plan_anual_adquisiciones));
		sb.append(",estudio_mercado="+estudio_mercado);
		sb.append(",tipo_financiacion_necesidad="+String.valueOf(tipo_financiacion_necesidad));
		sb.append(",analisis_riesgo="+analisis_riesgo);
		sb.append(",numero_elaboracion="+String.valueOf(numero_elaboracion));
		sb.append(",fecha_modificacion="+String.valueOf(fecha_modificacion));
		sb.append(",estado_necesidad="+String.valueOf(estado_necesidad));
		sb.append(",supervisor="+String.valueOf(supervisor));
		sb.append(",tipo_necesidad="+String.valueOf(tipo_necesidad));
		sb.append(",justificacion_rechazo="+justificacion_rechazo);
		sb.append(",justificacion_anulacion="+justificacion_anulacion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
salida_administrativa_solicitud_disponibilidadStruct salida_administrativa_solicitud_disponibilidad = new salida_administrativa_solicitud_disponibilidadStruct();
row2Struct row2 = new row2Struct();
salida_financiera_disponibilidad_proceso_externoStruct salida_financiera_disponibilidad_proceso_externo = new salida_financiera_disponibilidad_proceso_externoStruct();







	
	/**
	 * [tPostgresqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_2", false);
		start_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("salida_financiera_disponibilidad_proceso_externo" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_2().limitLog4jByte();





String dbschema_tPostgresqlOutput_2 = null;
	dbschema_tPostgresqlOutput_2 = "financiera";
	

String tableName_tPostgresqlOutput_2 = null;
if(dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2.trim().length() == 0) {
	tableName_tPostgresqlOutput_2 = "disponibilidad_proceso_externo";
} else {
	tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2 + "\".\"" + "disponibilidad_proceso_externo";
}

int nb_line_tPostgresqlOutput_2 = 0;
int nb_line_update_tPostgresqlOutput_2 = 0;
int nb_line_inserted_tPostgresqlOutput_2 = 0;
int nb_line_deleted_tPostgresqlOutput_2 = 0;
int nb_line_rejected_tPostgresqlOutput_2 = 0;

int deletedCount_tPostgresqlOutput_2=0;
int updatedCount_tPostgresqlOutput_2=0;
int insertedCount_tPostgresqlOutput_2=0;
int rejectedCount_tPostgresqlOutput_2=0;

boolean whetherReject_tPostgresqlOutput_2 = false;

java.sql.Connection conn_tPostgresqlOutput_2 = null;
String dbUser_tPostgresqlOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_2 = "jdbc:postgresql://"+"172.20.0.2"+":"+"5432"+"/"+"test";
    dbUser_tPostgresqlOutput_2 = "test";
 
	final String decryptedPassword_tPostgresqlOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("f3e656537b1a4d67");

    String dbPwd_tPostgresqlOutput_2 = decryptedPassword_tPostgresqlOutput_2;

    conn_tPostgresqlOutput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_2,dbUser_tPostgresqlOutput_2,dbPwd_tPostgresqlOutput_2);
	
	resourceMap.put("conn_tPostgresqlOutput_2", conn_tPostgresqlOutput_2);
        conn_tPostgresqlOutput_2.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_2 = 10000;
        int commitCounter_tPostgresqlOutput_2 = 0;


   int batchSize_tPostgresqlOutput_2 = 10000;
   int batchSizeCounter_tPostgresqlOutput_2=0;

int count_tPostgresqlOutput_2=0;
	    String insert_tPostgresqlOutput_2 = "INSERT INTO \"" + tableName_tPostgresqlOutput_2 + "\" (\"id\",\"tipo_disponibilidad\",\"proceso_externo\",\"disponibilidad\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(insert_tPostgresqlOutput_2);
	    

 



/**
 * [tPostgresqlOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
salida_financiera_disponibilidad_proceso_externoStruct salida_financiera_disponibilidad_proceso_externo_tmp = new salida_financiera_disponibilidad_proceso_externoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("salida_administrativa_solicitud_disponibilidad" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = "administrativa";
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "solicitud_disponibilidad";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "solicitud_disponibilidad";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+"172.20.0.2"+":"+"5432"+"/"+"test";
    dbUser_tPostgresqlOutput_1 = "test";
 
	final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("f3e656537b1a4d67");

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 10000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"id\",\"numero\",\"vigencia\",\"fecha_solicitud\",\"necesidad\",\"expedida\",\"justificacion_rechazo\") VALUES (?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
salida_administrativa_solicitud_disponibilidadStruct salida_administrativa_solicitud_disponibilidad_tmp = new salida_administrativa_solicitud_disponibilidadStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_1);
			   	String dbUser_tPostgresqlInput_1 = "test";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("f3e656537b1a4d67");
			   	
		        String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;
		        
				
			String url_tPostgresqlInput_1 = "jdbc:postgresql://" + "172.20.0.2" + ":" + "5432" + "/" + "test";
				
				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_1,dbUser_tPostgresqlInput_1,dbPwd_tPostgresqlInput_1);
		        
				conn_tPostgresqlInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "select* from administrativa.necesidad where id = "+context.curr_id;
			

            	globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);
		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;

		    try {
		    	rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								row1.id = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(1) != null) {
                row1.id = rs_tPostgresqlInput_1.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								row1.numero = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(2) != null) {
                row1.numero = rs_tPostgresqlInput_1.getInt(2);
            } else {
                    row1.numero = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 3) {
								row1.vigencia = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(3) != null) {
                row1.vigencia = rs_tPostgresqlInput_1.getBigDecimal(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 4) {
								row1.objeto = null;
							} else {
	                         		
        	row1.objeto = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 4, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 5) {
								row1.fecha_solicitud = null;
							} else {
										
			row1.fecha_solicitud = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 5);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 6) {
								row1.valor = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(6) != null) {
                row1.valor = rs_tPostgresqlInput_1.getBigDecimal(6);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 7) {
								row1.justificacion = null;
							} else {
	                         		
        	row1.justificacion = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 7, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 8) {
								row1.unidad_ejecutora = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(8) != null) {
                row1.unidad_ejecutora = rs_tPostgresqlInput_1.getInt(8);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 9) {
								row1.dias_duracion = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(9) != null) {
                row1.dias_duracion = rs_tPostgresqlInput_1.getBigDecimal(9);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 10) {
								row1.unico_pago = false;
							} else {
	                         		
            if(rs_tPostgresqlInput_1.getObject(10) != null) {
                row1.unico_pago = rs_tPostgresqlInput_1.getBoolean(10);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 11) {
								row1.agotar_presupuesto = false;
							} else {
	                         		
            if(rs_tPostgresqlInput_1.getObject(11) != null) {
                row1.agotar_presupuesto = rs_tPostgresqlInput_1.getBoolean(11);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 12) {
								row1.modalidad_seleccion = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(12) != null) {
                row1.modalidad_seleccion = rs_tPostgresqlInput_1.getInt(12);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 13) {
								row1.tipo_contrato_necesidad = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(13) != null) {
                row1.tipo_contrato_necesidad = rs_tPostgresqlInput_1.getInt(13);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 14) {
								row1.plan_anual_adquisiciones = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(14) != null) {
                row1.plan_anual_adquisiciones = rs_tPostgresqlInput_1.getInt(14);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 15) {
								row1.estudio_mercado = null;
							} else {
	                         		
        	row1.estudio_mercado = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 15, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 16) {
								row1.tipo_financiacion_necesidad = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(16) != null) {
                row1.tipo_financiacion_necesidad = rs_tPostgresqlInput_1.getInt(16);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 17) {
								row1.analisis_riesgo = null;
							} else {
	                         		
        	row1.analisis_riesgo = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 17, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 18) {
								row1.numero_elaboracion = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(18) != null) {
                row1.numero_elaboracion = rs_tPostgresqlInput_1.getInt(18);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 19) {
								row1.fecha_modificacion = null;
							} else {
										
			row1.fecha_modificacion = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 19);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 20) {
								row1.estado_necesidad = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(20) != null) {
                row1.estado_necesidad = rs_tPostgresqlInput_1.getInt(20);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 21) {
								row1.supervisor = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(21) != null) {
                row1.supervisor = rs_tPostgresqlInput_1.getInt(21);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 22) {
								row1.tipo_necesidad = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(22) != null) {
                row1.tipo_necesidad = rs_tPostgresqlInput_1.getInt(22);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 23) {
								row1.justificacion_rechazo = null;
							} else {
	                         		
        	row1.justificacion_rechazo = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 23, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 24) {
								row1.justificacion_anulacion = null;
							} else {
	                         		
        	row1.justificacion_anulacion = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 24, false);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

salida_administrativa_solicitud_disponibilidad = null;


// # Output table : 'salida_administrativa_solicitud_disponibilidad'
salida_administrativa_solicitud_disponibilidad_tmp.id = row1.id ;
salida_administrativa_solicitud_disponibilidad_tmp.numero = row1.numero ;
salida_administrativa_solicitud_disponibilidad_tmp.vigencia = row1.vigencia ;
salida_administrativa_solicitud_disponibilidad_tmp.fecha_solicitud = row1.fecha_solicitud ;
salida_administrativa_solicitud_disponibilidad_tmp.necesidad = row1.id ;
salida_administrativa_solicitud_disponibilidad_tmp.expedida = true ;
salida_administrativa_solicitud_disponibilidad_tmp.justificacion_rechazo = null;
salida_administrativa_solicitud_disponibilidad = salida_administrativa_solicitud_disponibilidad_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "salida_administrativa_solicitud_disponibilidad"
if(salida_administrativa_solicitud_disponibilidad != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//salida_administrativa_solicitud_disponibilidad
			//salida_administrativa_solicitud_disponibilidad


			
				if(execStat){
					runStat.updateStatOnConnection("salida_administrativa_solicitud_disponibilidad"+iterateId,1, 1);
				} 
			

		



            row2 = null;
        whetherReject_tPostgresqlOutput_1 = false;
                    pstmt_tPostgresqlOutput_1.setInt(1, salida_administrativa_solicitud_disponibilidad.id);

                    pstmt_tPostgresqlOutput_1.setInt(2, salida_administrativa_solicitud_disponibilidad.numero);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(3, salida_administrativa_solicitud_disponibilidad.vigencia);

                    if(salida_administrativa_solicitud_disponibilidad.fecha_solicitud != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(4, new java.sql.Timestamp(salida_administrativa_solicitud_disponibilidad.fecha_solicitud.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                    pstmt_tPostgresqlOutput_1.setInt(5, salida_administrativa_solicitud_disponibilidad.necesidad);

                    pstmt_tPostgresqlOutput_1.setBoolean(6, salida_administrativa_solicitud_disponibilidad.expedida);

                    if(salida_administrativa_solicitud_disponibilidad.justificacion_rechazo == null) {
pstmt_tPostgresqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(7, salida_administrativa_solicitud_disponibilidad.justificacion_rechazo);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
            if(!whetherReject_tPostgresqlOutput_1) {
                            row2 = new row2Struct();
                                row2.id = salida_administrativa_solicitud_disponibilidad.id;
                                row2.numero = salida_administrativa_solicitud_disponibilidad.numero;
                                row2.vigencia = salida_administrativa_solicitud_disponibilidad.vigencia;
                                row2.fecha_solicitud = salida_administrativa_solicitud_disponibilidad.fecha_solicitud;
                                row2.necesidad = salida_administrativa_solicitud_disponibilidad.necesidad;
                                row2.expedida = salida_administrativa_solicitud_disponibilidad.expedida;
                                row2.justificacion_rechazo = salida_administrativa_solicitud_disponibilidad.justificacion_rechazo;
            }
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
				    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
				    	String errormessage_tPostgresqlOutput_1;
						if (ne_tPostgresqlOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
							errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
						}else{
							errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
			    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
			    	String errormessage_tPostgresqlOutput_1;
					if (ne_tPostgresqlOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
						errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
					}else{
						errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
					}
			    	
			    	int countSum_tPostgresqlOutput_1 = 0;
					for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
					
			    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
			    	
			    	System.err.println(errormessage_tPostgresqlOutput_1);
			    	
				}
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

 



/**
 * [tPostgresqlOutput_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
	                        		    	Object exprKeyValue_row3__solicitud = row2.necesidad ;
	                        		    	if(exprKeyValue_row3__solicitud == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_2 = true;
	                        		    	} else {
                        		    			row3HashKey.solicitud = (int)(Integer) exprKeyValue_row3__solicitud;
                        		    		}
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_2 || !tHash_Lookup_row3.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							row3Struct row3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

salida_financiera_disponibilidad_proceso_externo = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'salida_financiera_disponibilidad_proceso_externo'
salida_financiera_disponibilidad_proceso_externo_tmp.id = row2.id;
salida_financiera_disponibilidad_proceso_externo_tmp.tipo_disponibilidad = 1 ;
salida_financiera_disponibilidad_proceso_externo_tmp.proceso_externo = row2.id ;
salida_financiera_disponibilidad_proceso_externo_tmp.disponibilidad = row3.id ;
salida_financiera_disponibilidad_proceso_externo = salida_financiera_disponibilidad_proceso_externo_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "salida_financiera_disponibilidad_proceso_externo"
if(salida_financiera_disponibilidad_proceso_externo != null) { 



	
	/**
	 * [tPostgresqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

			//salida_financiera_disponibilidad_proceso_externo
			//salida_financiera_disponibilidad_proceso_externo


			
				if(execStat){
					runStat.updateStatOnConnection("salida_financiera_disponibilidad_proceso_externo"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_2 = false;
                    pstmt_tPostgresqlOutput_2.setInt(1, salida_financiera_disponibilidad_proceso_externo.id);

                    pstmt_tPostgresqlOutput_2.setInt(2, salida_financiera_disponibilidad_proceso_externo.tipo_disponibilidad);

                    pstmt_tPostgresqlOutput_2.setInt(3, salida_financiera_disponibilidad_proceso_externo.proceso_externo);

                    pstmt_tPostgresqlOutput_2.setInt(4, salida_financiera_disponibilidad_proceso_externo.disponibilidad);

			
    		pstmt_tPostgresqlOutput_2.addBatch();
    		nb_line_tPostgresqlOutput_2++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_2++;
    		  
    			if ((batchSize_tPostgresqlOutput_2 > 0) && (batchSize_tPostgresqlOutput_2 <= batchSizeCounter_tPostgresqlOutput_2)) {
                try {
						int countSum_tPostgresqlOutput_2 = 0;
						    
						for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
				    	
				    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_2){
				    	java.sql.SQLException ne_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getNextException(),sqle_tPostgresqlOutput_2=null;
				    	String errormessage_tPostgresqlOutput_2;
						if (ne_tPostgresqlOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_2 = new java.sql.SQLException(e_tPostgresqlOutput_2.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_2.getMessage(), ne_tPostgresqlOutput_2.getSQLState(), ne_tPostgresqlOutput_2.getErrorCode(), ne_tPostgresqlOutput_2);
							errormessage_tPostgresqlOutput_2 = sqle_tPostgresqlOutput_2.getMessage();
						}else{
							errormessage_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_2 = 0;
						for(int countEach_tPostgresqlOutput_2: e_tPostgresqlOutput_2.getUpdateCounts()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
						
				    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tPostgresqlOutput_2++;
                if(commitEvery_tPostgresqlOutput_2 <= commitCounter_tPostgresqlOutput_2) {
                if ((batchSize_tPostgresqlOutput_2 > 0) && (batchSizeCounter_tPostgresqlOutput_2 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_2 = 0;
                		    
						for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
            	    	
                batchSizeCounter_tPostgresqlOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_2){
			    	java.sql.SQLException ne_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getNextException(),sqle_tPostgresqlOutput_2=null;
			    	String errormessage_tPostgresqlOutput_2;
					if (ne_tPostgresqlOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tPostgresqlOutput_2 = new java.sql.SQLException(e_tPostgresqlOutput_2.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_2.getMessage(), ne_tPostgresqlOutput_2.getSQLState(), ne_tPostgresqlOutput_2.getErrorCode(), ne_tPostgresqlOutput_2);
						errormessage_tPostgresqlOutput_2 = sqle_tPostgresqlOutput_2.getMessage();
					}else{
						errormessage_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getMessage();
					}
			    	
			    	int countSum_tPostgresqlOutput_2 = 0;
					for(int countEach_tPostgresqlOutput_2: e_tPostgresqlOutput_2.getUpdateCounts()) {
						countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
					}
					
			    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
			    	
			    	System.err.println(errormessage_tPostgresqlOutput_2);
			    	
				}
            }
                	conn_tPostgresqlOutput_2.commit();
                	
                	commitCounter_tPostgresqlOutput_2=0;
                }

 


	tos_count_tPostgresqlOutput_2++;

/**
 * [tPostgresqlOutput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_end ] stop
 */

} // End of branch "salida_financiera_disponibilidad_proceso_externo"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tPostgresqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

 



/**
 * [tPostgresqlOutput_1 process_data_end ] stop
 */

} // End of branch "salida_administrativa_solicitud_disponibilidad"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

	if(conn_tPostgresqlInput_1 != null && !conn_tPostgresqlInput_1.isClosed()) {
		
			conn_tPostgresqlInput_1.commit();
			
		
			conn_tPostgresqlInput_1.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
	    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
	    	String errormessage_tPostgresqlOutput_1;
			if (ne_tPostgresqlOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
				errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
			}else{
				errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_1);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
        		
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("salida_administrativa_solicitud_disponibilidad"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



	    try {
				int countSum_tPostgresqlOutput_2 = 0;
				if (pstmt_tPostgresqlOutput_2 != null && batchSizeCounter_tPostgresqlOutput_2 > 0) {
						
					for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
						countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_2){
	    	java.sql.SQLException ne_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getNextException(),sqle_tPostgresqlOutput_2=null;
	    	String errormessage_tPostgresqlOutput_2;
			if (ne_tPostgresqlOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_2 = new java.sql.SQLException(e_tPostgresqlOutput_2.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_2.getMessage(), ne_tPostgresqlOutput_2.getSQLState(), ne_tPostgresqlOutput_2.getErrorCode(), ne_tPostgresqlOutput_2);
				errormessage_tPostgresqlOutput_2 = sqle_tPostgresqlOutput_2.getMessage();
			}else{
				errormessage_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_2 = 0;
			for(int countEach_tPostgresqlOutput_2: e_tPostgresqlOutput_2.getUpdateCounts()) {
				countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
			}
			
	    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_2);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_2 != null) {
        		
            pstmt_tPostgresqlOutput_2.close();
        }

			
			conn_tPostgresqlOutput_2.commit();
			
		
    	conn_tPostgresqlOutput_2 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_2", true);
    	

	nb_line_deleted_tPostgresqlOutput_2=nb_line_deleted_tPostgresqlOutput_2+ deletedCount_tPostgresqlOutput_2;
	nb_line_update_tPostgresqlOutput_2=nb_line_update_tPostgresqlOutput_2 + updatedCount_tPostgresqlOutput_2;
	nb_line_inserted_tPostgresqlOutput_2=nb_line_inserted_tPostgresqlOutput_2 + insertedCount_tPostgresqlOutput_2;
	nb_line_rejected_tPostgresqlOutput_2=nb_line_rejected_tPostgresqlOutput_2 + rejectedCount_tPostgresqlOutput_2;
	
        globalMap.put("tPostgresqlOutput_2_NB_LINE",nb_line_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("salida_financiera_disponibilidad_proceso_externo"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_2", true);
end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_2 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tPostgresqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1");
					
					
            		
					ctn_tPostgresqlOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_2")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_2")!=null){
				try {
					
					
					java.sql.Connection ctn_tPostgresqlOutput_2 = (java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_2");
					
					
            		
					ctn_tPostgresqlOutput_2.close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_2) {
					String errorMessage_tPostgresqlOutput_2 = "failed to close the connection in tPostgresqlOutput_2 :" + sqlEx_tPostgresqlOutput_2.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_2);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_ajuste_cdp_solicitud = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public BigDecimal vigencia;

				public BigDecimal getVigencia () {
					return this.vigencia;
				}
				
			    public BigDecimal numero_disponibilidad;

				public BigDecimal getNumero_disponibilidad () {
					return this.numero_disponibilidad;
				}
				
			    public int responsable;

				public int getResponsable () {
					return this.responsable;
				}
				
			    public java.util.Date fecha_registro;

				public java.util.Date getFecha_registro () {
					return this.fecha_registro;
				}
				
			    public short estado;

				public short getEstado () {
					return this.estado;
				}
				
			    public int solicitud;

				public int getSolicitud () {
					return this.solicitud;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.solicitud;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.solicitud != other.solicitud)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.id = this.id;
	            other.vigencia = this.vigencia;
	            other.numero_disponibilidad = this.numero_disponibilidad;
	            other.responsable = this.responsable;
	            other.fecha_registro = this.fecha_registro;
	            other.estado = this.estado;
	            other.solicitud = this.solicitud;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.solicitud = this.solicitud;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_ajuste_cdp_solicitud) {

        	try {

        		int length = 0;
		
			        this.solicitud = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.solicitud);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
       			    	this.vigencia = (BigDecimal) ois.readObject();
					
       			    	this.numero_disponibilidad = (BigDecimal) ois.readObject();
					
			            this.responsable = dis.readInt();
					
						this.fecha_registro = readDate(dis,ois);
					
			            this.estado = dis.readShort();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
       			    	oos.writeObject(this.vigencia);
					
       			    	oos.writeObject(this.numero_disponibilidad);
					
		            	dos.writeInt(this.responsable);
					
						writeDate(this.fecha_registro, dos, oos);
					
		            	dos.writeShort(this.estado);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",vigencia="+String.valueOf(vigencia));
		sb.append(",numero_disponibilidad="+String.valueOf(numero_disponibilidad));
		sb.append(",responsable="+String.valueOf(responsable));
		sb.append(",fecha_registro="+String.valueOf(fecha_registro));
		sb.append(",estado="+String.valueOf(estado));
		sb.append(",solicitud="+String.valueOf(solicitud));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.solicitud, other.solicitud);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row3 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row3().limitLog4jByte();

			   		// connection name:row3
			   		// source node:tPostgresqlInput_2 - inputs:(after_tPostgresqlInput_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row3) outputs:(salida_financiera_disponibilidad_proceso_externo)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_2);
			   	String dbUser_tPostgresqlInput_2 = "test";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("f3e656537b1a4d67");
			   	
		        String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;
		        
				
			String url_tPostgresqlInput_2 = "jdbc:postgresql://" + "172.20.0.2" + ":" + "5432" + "/" + "test";
				
				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_2,dbUser_tPostgresqlInput_2,dbPwd_tPostgresqlInput_2);
		        
				conn_tPostgresqlInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select * from financiera.disponibilidad where id = "+context.curr_id;
			

            	globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);
		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;

		    try {
		    	rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								row3.id = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(1) != null) {
                row3.id = rs_tPostgresqlInput_2.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								row3.vigencia = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(2) != null) {
                row3.vigencia = rs_tPostgresqlInput_2.getBigDecimal(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 3) {
								row3.numero_disponibilidad = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(3) != null) {
                row3.numero_disponibilidad = rs_tPostgresqlInput_2.getBigDecimal(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 4) {
								row3.responsable = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(4) != null) {
                row3.responsable = rs_tPostgresqlInput_2.getInt(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 5) {
								row3.fecha_registro = null;
							} else {
										
			row3.fecha_registro = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 5);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 6) {
								row3.estado = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(6) != null) {
                row3.estado = rs_tPostgresqlInput_2.getShort(6);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 7) {
								row3.solicitud = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(7) != null) {
                row3.solicitud = rs_tPostgresqlInput_2.getInt(7);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.id = row3.id;
				
				row3_HashRow.vigencia = row3.vigencia;
				
				row3_HashRow.numero_disponibilidad = row3.numero_disponibilidad;
				
				row3_HashRow.responsable = row3.responsable;
				
				row3_HashRow.fecha_registro = row3.fecha_registro;
				
				row3_HashRow.estado = row3.estado;
				
				row3_HashRow.solicitud = row3.solicitud;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	stmt_tPostgresqlInput_2.close();

	if(conn_tPostgresqlInput_2 != null && !conn_tPostgresqlInput_2.isClosed()) {
		
			conn_tPostgresqlInput_2.commit();
			
		
			conn_tPostgresqlInput_2.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final ajuste_cdp_solicitud ajuste_cdp_solicitudClass = new ajuste_cdp_solicitud();

        int exitCode = ajuste_cdp_solicitudClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ajuste_cdp_solicitud.class.getClassLoader().getResourceAsStream("financiera_migr/ajuste_cdp_solicitud_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ajuste_cdp_solicitud.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("curr_id", "id_Integer");
				
             try{
                 context.curr_id=routines.system.ParserUtils.parseTo_Integer (context.getProperty("curr_id"));
             }catch(NumberFormatException e){
                 context.curr_id=null;
              }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("curr_id")) {
                context.curr_id = (Integer) parentContextMap.get("curr_id");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tPostgresqlInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresqlInput_1) {
globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", -1);

e_tPostgresqlInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ajuste_cdp_solicitud");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     135041 characters generated by Talend Open Studio for Data Integration 
 *     on the 4 de agosto de 2018 07:52:08 PM COT
 ************************************************************************************************/
// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package financiera_migr.volcado_cdp_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: volcado_cdp Purpose: volcado_cdp<br>
 * Description: volcado_cdp <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class volcado_cdp implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(disponibilidad != null){
				
					this.setProperty("disponibilidad", disponibilidad.toString());
				
			}
			
			if(vigencia != null){
				
					this.setProperty("vigencia", vigencia.toString());
				
			}
			
			if(curr_id != null){
				
					this.setProperty("curr_id", curr_id.toString());
				
			}
			
		}

public Integer disponibilidad;
public Integer getDisponibilidad(){
	return this.disponibilidad;
}
public Integer vigencia;
public Integer getVigencia(){
	return this.vigencia;
}
public Integer curr_id;
public Integer getCurr_id(){
	return this.curr_id;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "volcado_cdp";
	private final String projectName = "FINANCIERA_MIGR";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				volcado_cdp.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(volcado_cdp.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_salida_disponibilidad_financiera_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class salida_disponibilidad_apropiacionStruct implements routines.system.IPersistableRow<salida_disponibilidad_apropiacionStruct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];

	
			    public Integer disponibilidad;

				public Integer getDisponibilidad () {
					return this.disponibilidad;
				}
				
			    public Integer apropiacion;

				public Integer getApropiacion () {
					return this.apropiacion;
				}
				
			    public Double valor;

				public Double getValor () {
					return this.valor;
				}
				
			    public Integer fuente_financiamiento;

				public Integer getFuente_financiamiento () {
					return this.fuente_financiamiento;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
						this.disponibilidad = readInteger(dis);
					
						this.apropiacion = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valor = null;
           				} else {
           			    	this.valor = dis.readDouble();
           				}
					
						this.fuente_financiamiento = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.disponibilidad,dos);
					
					// Integer
				
						writeInteger(this.apropiacion,dos);
					
					// Double
				
						if(this.valor == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.valor);
		            	}
					
					// Integer
				
						writeInteger(this.fuente_financiamiento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("disponibilidad="+String.valueOf(disponibilidad));
		sb.append(",apropiacion="+String.valueOf(apropiacion));
		sb.append(",valor="+String.valueOf(valor));
		sb.append(",fuente_financiamiento="+String.valueOf(fuente_financiamiento));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salida_disponibilidad_apropiacionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}
				
			    public int RUBRO_INTERNO;

				public int getRUBRO_INTERNO () {
					return this.RUBRO_INTERNO;
				}
				
			    public String CODIGO_COMPANIA;

				public String getCODIGO_COMPANIA () {
					return this.CODIGO_COMPANIA;
				}
				
			    public int CODIGO_UNIDAD_EJECUTORA;

				public int getCODIGO_UNIDAD_EJECUTORA () {
					return this.CODIGO_UNIDAD_EJECUTORA;
				}
				
			    public int NUMERO_DISPONIBILIDAD;

				public int getNUMERO_DISPONIBILIDAD () {
					return this.NUMERO_DISPONIBILIDAD;
				}
				
			    public String CODIGO_FUENTES_FINANCIACION;

				public String getCODIGO_FUENTES_FINANCIACION () {
					return this.CODIGO_FUENTES_FINANCIACION;
				}
				
			    public double VALOR;

				public double getVALOR () {
					return this.VALOR;
				}
				
			    public BigDecimal ID_LIMAY;

				public BigDecimal getID_LIMAY () {
					return this.ID_LIMAY;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.VIGENCIA;
						
							result = prime * result + (int) this.CODIGO_UNIDAD_EJECUTORA;
						
							result = prime * result + (int) this.NUMERO_DISPONIBILIDAD;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.VIGENCIA != other.VIGENCIA)
							return false;
					
						if (this.CODIGO_UNIDAD_EJECUTORA != other.CODIGO_UNIDAD_EJECUTORA)
							return false;
					
						if (this.NUMERO_DISPONIBILIDAD != other.NUMERO_DISPONIBILIDAD)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.VIGENCIA = this.VIGENCIA;
	            other.RUBRO_INTERNO = this.RUBRO_INTERNO;
	            other.CODIGO_COMPANIA = this.CODIGO_COMPANIA;
	            other.CODIGO_UNIDAD_EJECUTORA = this.CODIGO_UNIDAD_EJECUTORA;
	            other.NUMERO_DISPONIBILIDAD = this.NUMERO_DISPONIBILIDAD;
	            other.CODIGO_FUENTES_FINANCIACION = this.CODIGO_FUENTES_FINANCIACION;
	            other.VALOR = this.VALOR;
	            other.ID_LIMAY = this.ID_LIMAY;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.VIGENCIA = this.VIGENCIA;
	            	other.CODIGO_UNIDAD_EJECUTORA = this.CODIGO_UNIDAD_EJECUTORA;
	            	other.NUMERO_DISPONIBILIDAD = this.NUMERO_DISPONIBILIDAD;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
			        this.VIGENCIA = dis.readInt();
					
			        this.CODIGO_UNIDAD_EJECUTORA = dis.readInt();
					
			        this.NUMERO_DISPONIBILIDAD = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// int
				
		            	dos.writeInt(this.CODIGO_UNIDAD_EJECUTORA);
					
					// int
				
		            	dos.writeInt(this.NUMERO_DISPONIBILIDAD);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.RUBRO_INTERNO = dis.readInt();
					
						this.CODIGO_COMPANIA = readString(dis,ois);
					
						this.CODIGO_FUENTES_FINANCIACION = readString(dis,ois);
					
			            this.VALOR = dis.readDouble();
					
       			    	this.ID_LIMAY = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.RUBRO_INTERNO);
					
						writeString(this.CODIGO_COMPANIA, dos, oos);
					
						writeString(this.CODIGO_FUENTES_FINANCIACION, dos, oos);
					
		            	dos.writeDouble(this.VALOR);
					
       			    	oos.writeObject(this.ID_LIMAY);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",RUBRO_INTERNO="+String.valueOf(RUBRO_INTERNO));
		sb.append(",CODIGO_COMPANIA="+CODIGO_COMPANIA);
		sb.append(",CODIGO_UNIDAD_EJECUTORA="+String.valueOf(CODIGO_UNIDAD_EJECUTORA));
		sb.append(",NUMERO_DISPONIBILIDAD="+String.valueOf(NUMERO_DISPONIBILIDAD));
		sb.append(",CODIGO_FUENTES_FINANCIACION="+CODIGO_FUENTES_FINANCIACION);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",ID_LIMAY="+String.valueOf(ID_LIMAY));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.VIGENCIA, other.VIGENCIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODIGO_UNIDAD_EJECUTORA, other.CODIGO_UNIDAD_EJECUTORA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMERO_DISPONIBILIDAD, other.NUMERO_DISPONIBILIDAD);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];

	
			    public BigDecimal VIGENCIA;

				public BigDecimal getVIGENCIA () {
					return this.VIGENCIA;
				}
				
			    public BigDecimal RUBRO_INTERNO;

				public BigDecimal getRUBRO_INTERNO () {
					return this.RUBRO_INTERNO;
				}
				
			    public String CODIGO_COMPANIA;

				public String getCODIGO_COMPANIA () {
					return this.CODIGO_COMPANIA;
				}
				
			    public String CODIGO_UNIDAD_EJECUTORA;

				public String getCODIGO_UNIDAD_EJECUTORA () {
					return this.CODIGO_UNIDAD_EJECUTORA;
				}
				
			    public BigDecimal NUMERO_DISPONIBILIDAD;

				public BigDecimal getNUMERO_DISPONIBILIDAD () {
					return this.NUMERO_DISPONIBILIDAD;
				}
				
			    public String CODIGO_FUENTES_FINANCIACION;

				public String getCODIGO_FUENTES_FINANCIACION () {
					return this.CODIGO_FUENTES_FINANCIACION;
				}
				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}
				
			    public BigDecimal ID_LIMAY;

				public BigDecimal getID_LIMAY () {
					return this.ID_LIMAY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_volcado_cdp.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_volcado_cdp.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
						this.VIGENCIA = (BigDecimal) dis.readObject();
					
						this.RUBRO_INTERNO = (BigDecimal) dis.readObject();
					
					this.CODIGO_COMPANIA = readString(dis);
					
					this.CODIGO_UNIDAD_EJECUTORA = readString(dis);
					
						this.NUMERO_DISPONIBILIDAD = (BigDecimal) dis.readObject();
					
					this.CODIGO_FUENTES_FINANCIACION = readString(dis);
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.ID_LIMAY = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.VIGENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RUBRO_INTERNO);
					
					// String
				
						writeString(this.CODIGO_COMPANIA,dos);
					
					// String
				
						writeString(this.CODIGO_UNIDAD_EJECUTORA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERO_DISPONIBILIDAD);
					
					// String
				
						writeString(this.CODIGO_FUENTES_FINANCIACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_LIMAY);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",RUBRO_INTERNO="+String.valueOf(RUBRO_INTERNO));
		sb.append(",CODIGO_COMPANIA="+CODIGO_COMPANIA);
		sb.append(",CODIGO_UNIDAD_EJECUTORA="+CODIGO_UNIDAD_EJECUTORA);
		sb.append(",NUMERO_DISPONIBILIDAD="+String.valueOf(NUMERO_DISPONIBILIDAD));
		sb.append(",CODIGO_FUENTES_FINANCIACION="+CODIGO_FUENTES_FINANCIACION);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",ID_LIMAY="+String.valueOf(ID_LIMAY));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_2Struct implements routines.system.IPersistableRow<after_tOracleInput_2Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];

	
			    public BigDecimal VIGENCIA;

				public BigDecimal getVIGENCIA () {
					return this.VIGENCIA;
				}
				
			    public BigDecimal RUBRO_INTERNO;

				public BigDecimal getRUBRO_INTERNO () {
					return this.RUBRO_INTERNO;
				}
				
			    public String CODIGO_COMPANIA;

				public String getCODIGO_COMPANIA () {
					return this.CODIGO_COMPANIA;
				}
				
			    public String CODIGO_UNIDAD_EJECUTORA;

				public String getCODIGO_UNIDAD_EJECUTORA () {
					return this.CODIGO_UNIDAD_EJECUTORA;
				}
				
			    public BigDecimal NUMERO_DISPONIBILIDAD;

				public BigDecimal getNUMERO_DISPONIBILIDAD () {
					return this.NUMERO_DISPONIBILIDAD;
				}
				
			    public String CODIGO_FUENTES_FINANCIACION;

				public String getCODIGO_FUENTES_FINANCIACION () {
					return this.CODIGO_FUENTES_FINANCIACION;
				}
				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}
				
			    public BigDecimal ID_LIMAY;

				public BigDecimal getID_LIMAY () {
					return this.ID_LIMAY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_volcado_cdp.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_volcado_cdp.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
						this.VIGENCIA = (BigDecimal) dis.readObject();
					
						this.RUBRO_INTERNO = (BigDecimal) dis.readObject();
					
					this.CODIGO_COMPANIA = readString(dis);
					
					this.CODIGO_UNIDAD_EJECUTORA = readString(dis);
					
						this.NUMERO_DISPONIBILIDAD = (BigDecimal) dis.readObject();
					
					this.CODIGO_FUENTES_FINANCIACION = readString(dis);
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.ID_LIMAY = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.VIGENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RUBRO_INTERNO);
					
					// String
				
						writeString(this.CODIGO_COMPANIA,dos);
					
					// String
				
						writeString(this.CODIGO_UNIDAD_EJECUTORA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERO_DISPONIBILIDAD);
					
					// String
				
						writeString(this.CODIGO_FUENTES_FINANCIACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_LIMAY);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",RUBRO_INTERNO="+String.valueOf(RUBRO_INTERNO));
		sb.append(",CODIGO_COMPANIA="+CODIGO_COMPANIA);
		sb.append(",CODIGO_UNIDAD_EJECUTORA="+CODIGO_UNIDAD_EJECUTORA);
		sb.append(",NUMERO_DISPONIBILIDAD="+String.valueOf(NUMERO_DISPONIBILIDAD));
		sb.append(",CODIGO_FUENTES_FINANCIACION="+CODIGO_FUENTES_FINANCIACION);
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",ID_LIMAY="+String.valueOf(ID_LIMAY));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_1Process(globalMap);
		tOracleInput_3Process(globalMap);
		tPostgresqlInput_3Process(globalMap);
		tPostgresqlInput_1Process(globalMap);

		row4Struct row4 = new row4Struct();
row3Struct row3 = new row3Struct();
salida_disponibilidad_apropiacionStruct salida_disponibilidad_apropiacion = new salida_disponibilidad_apropiacionStruct();






	
	/**
	 * [tPostgresqlOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_3", false);
		start_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("salida_disponibilidad_apropiacion" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_3().limitLog4jByte();





String dbschema_tPostgresqlOutput_3 = null;
	dbschema_tPostgresqlOutput_3 = "financiera";
	

String tableName_tPostgresqlOutput_3 = null;
if(dbschema_tPostgresqlOutput_3 == null || dbschema_tPostgresqlOutput_3.trim().length() == 0) {
	tableName_tPostgresqlOutput_3 = "disponibilidad_apropiacion";
} else {
	tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3 + "\".\"" + "disponibilidad_apropiacion";
}

int nb_line_tPostgresqlOutput_3 = 0;
int nb_line_update_tPostgresqlOutput_3 = 0;
int nb_line_inserted_tPostgresqlOutput_3 = 0;
int nb_line_deleted_tPostgresqlOutput_3 = 0;
int nb_line_rejected_tPostgresqlOutput_3 = 0;

int deletedCount_tPostgresqlOutput_3=0;
int updatedCount_tPostgresqlOutput_3=0;
int insertedCount_tPostgresqlOutput_3=0;
int rejectedCount_tPostgresqlOutput_3=0;

boolean whetherReject_tPostgresqlOutput_3 = false;

java.sql.Connection conn_tPostgresqlOutput_3 = null;
String dbUser_tPostgresqlOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_3 = "jdbc:postgresql://"+"172.20.0.2"+":"+"5432"+"/"+"test";
    dbUser_tPostgresqlOutput_3 = "test";
 
	final String decryptedPassword_tPostgresqlOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("f3e656537b1a4d67");

    String dbPwd_tPostgresqlOutput_3 = decryptedPassword_tPostgresqlOutput_3;

    conn_tPostgresqlOutput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_3,dbUser_tPostgresqlOutput_3,dbPwd_tPostgresqlOutput_3);
	
	resourceMap.put("conn_tPostgresqlOutput_3", conn_tPostgresqlOutput_3);
        conn_tPostgresqlOutput_3.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_3 = 1000;
        int commitCounter_tPostgresqlOutput_3 = 0;


   int batchSize_tPostgresqlOutput_3 = 10000;
   int batchSizeCounter_tPostgresqlOutput_3=0;

int count_tPostgresqlOutput_3=0;
	    String insert_tPostgresqlOutput_3 = "INSERT INTO \"" + tableName_tPostgresqlOutput_3 + "\" (\"disponibilidad\",\"apropiacion\",\"valor\",\"fuente_financiamiento\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.prepareStatement(insert_tPostgresqlOutput_3);
	    

 



/**
 * [tPostgresqlOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		
    	class BytesLimit65535_tMap_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_3().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<salida_disponibilidad_financieraStruct> tHash_Lookup_salida_disponibilidad_financiera = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<salida_disponibilidad_financieraStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<salida_disponibilidad_financieraStruct>) 
					globalMap.get( "tHash_Lookup_salida_disponibilidad_financiera" ))
					;					
					
	

salida_disponibilidad_financieraStruct salida_disponibilidad_financieraHashKey = new salida_disponibilidad_financieraStruct();
salida_disponibilidad_financieraStruct salida_disponibilidad_financieraDefault = new salida_disponibilidad_financieraStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
salida_disponibilidad_apropiacionStruct salida_disponibilidad_apropiacion_tmp = new salida_disponibilidad_apropiacionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tConvertType_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_2", false);
		start_Hash.put("tConvertType_2", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tConvertType_2 = 0;
		
    	class BytesLimit65535_tConvertType_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tConvertType_2().limitLog4jByte();
	int nb_line_tConvertType_2 = 0;  
 



/**
 * [tConvertType_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";

	
		int tos_count_tOracleInput_2 = 0;
		
    	class BytesLimit65535_tOracleInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tOracleInput_2().limitLog4jByte();
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				String driverClass_tOracleInput_2 = "oracle.jdbc.driver.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_2);
				
			String url_tOracleInput_2 = null;
				url_tOracleInput_2 = "jdbc:oracle:thin:@" + "10.20.0.7" + ":" + "1521" + ":" + "UD";

				String dbUser_tOracleInput_2 = "SICGEFAD";

				

				 
	final String decryptedPassword_tOracleInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("cd471b85ddbdbd5b7eb697d135b1c956f4f7aba1746784ea");

				String dbPwd_tOracleInput_2 = decryptedPassword_tOracleInput_2;

				
					conn_tOracleInput_2 = java.sql.DriverManager.getConnection(url_tOracleInput_2,dbUser_tOracleInput_2,dbPwd_tOracleInput_2);
				java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_2.next()) {
					sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
				}
                                if (!(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                                }
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT * FROM PR.PR_DISPONIBILIDAD_RUBRO";
			

            	globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);
		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row4.VIGENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row4.VIGENCIA = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row4.RUBRO_INTERNO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(2) != null) {
						row4.RUBRO_INTERNO = rs_tOracleInput_2.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row4.CODIGO_COMPANIA = null;
							} else {
	                         		
        	row4.CODIGO_COMPANIA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row4.CODIGO_UNIDAD_EJECUTORA = null;
							} else {
	                         		
        	row4.CODIGO_UNIDAD_EJECUTORA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row4.NUMERO_DISPONIBILIDAD = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(5) != null) {
						row4.NUMERO_DISPONIBILIDAD = rs_tOracleInput_2.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 6) {
								row4.CODIGO_FUENTES_FINANCIACION = null;
							} else {
	                         		
        	row4.CODIGO_FUENTES_FINANCIACION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 7) {
								row4.VALOR = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(7) != null) {
						row4.VALOR = rs_tOracleInput_2.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 8) {
								row4.ID_LIMAY = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(8) != null) {
						row4.ID_LIMAY = rs_tOracleInput_2.getBigDecimal(8);
					} else {
				
						row4.ID_LIMAY = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";

	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";

	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_2 main ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		


  row3 = new row3Struct();
  boolean bHasError_tConvertType_2 = false;             
          try {
              row3.VIGENCIA=TypeConvert.BigDecimal2int(row4.VIGENCIA);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.RUBRO_INTERNO=TypeConvert.BigDecimal2int(row4.RUBRO_INTERNO);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.CODIGO_COMPANIA=TypeConvert.String2String(row4.CODIGO_COMPANIA);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.CODIGO_UNIDAD_EJECUTORA=TypeConvert.String2int(row4.CODIGO_UNIDAD_EJECUTORA);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.NUMERO_DISPONIBILIDAD=TypeConvert.BigDecimal2int(row4.NUMERO_DISPONIBILIDAD);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.CODIGO_FUENTES_FINANCIACION=TypeConvert.String2String(row4.CODIGO_FUENTES_FINANCIACION);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.VALOR=TypeConvert.BigDecimal2double(row4.VALOR);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.ID_LIMAY=TypeConvert.BigDecimal2BigDecimal(row4.ID_LIMAY);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_2) {row3 = null;}

  nb_line_tConvertType_2 ++ ;
 


	tos_count_tConvertType_2++;

/**
 * [tConvertType_2 main ] stop
 */
	
	/**
	 * [tConvertType_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	

 



/**
 * [tConvertType_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "salida_disponibilidad_financiera" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsalida_disponibilidad_financiera = false;
       		  	    	
       		  	    	
 							salida_disponibilidad_financieraStruct salida_disponibilidad_financieraObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
	                        		    	Object exprKeyValue_salida_disponibilidad_financiera__vigencia = row3.VIGENCIA ;
	                        		    	if(exprKeyValue_salida_disponibilidad_financiera__vigencia == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_3 = true;
	                        		    	} else {
                        		    			salida_disponibilidad_financieraHashKey.vigencia = (int)(Integer) exprKeyValue_salida_disponibilidad_financiera__vigencia;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_salida_disponibilidad_financiera__numero_disponibilidad = row3.NUMERO_DISPONIBILIDAD ;
	                        		    	if(exprKeyValue_salida_disponibilidad_financiera__numero_disponibilidad == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_3 = true;
	                        		    	} else {
                        		    			salida_disponibilidad_financieraHashKey.numero_disponibilidad = (int)(Integer) exprKeyValue_salida_disponibilidad_financiera__numero_disponibilidad;
                        		    		}
                        		    		
                        		    		salida_disponibilidad_financieraHashKey.unidad_ejecutora = row3.CODIGO_UNIDAD_EJECUTORA ;
                        		    		

								
		                        	salida_disponibilidad_financieraHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_salida_disponibilidad_financiera.lookup( salida_disponibilidad_financieraHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_3 || !tHash_Lookup_salida_disponibilidad_financiera.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_salida_disponibilidad_financiera != null && tHash_Lookup_salida_disponibilidad_financiera.getCount(salida_disponibilidad_financieraHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'salida_disponibilidad_financiera' and it contains more one result from keys :  salida_disponibilidad_financiera.vigencia = '" + salida_disponibilidad_financieraHashKey.vigencia + "', salida_disponibilidad_financiera.numero_disponibilidad = '" + salida_disponibilidad_financieraHashKey.numero_disponibilidad + "', salida_disponibilidad_financiera.unidad_ejecutora = '" + salida_disponibilidad_financieraHashKey.unidad_ejecutora + "'");
								} // G 071
							

							salida_disponibilidad_financieraStruct salida_disponibilidad_financiera = null;
                    		  	 
							   
                    		  	 
	       		  	    	salida_disponibilidad_financieraStruct fromLookup_salida_disponibilidad_financiera = null;
							salida_disponibilidad_financiera = salida_disponibilidad_financieraDefault;
										 
							
								 
							
							
								if (tHash_Lookup_salida_disponibilidad_financiera !=null && tHash_Lookup_salida_disponibilidad_financiera.hasNext()) { // G 099
								
							
								
								fromLookup_salida_disponibilidad_financiera = tHash_Lookup_salida_disponibilidad_financiera.next();

							
							
								} // G 099
							
							

							if(fromLookup_salida_disponibilidad_financiera != null) {
								salida_disponibilidad_financiera = fromLookup_salida_disponibilidad_financiera;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		row6HashKey.MAX_TAB1_INTERNO_RUBRO_ = row3.RUBRO_INTERNO ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							row6Struct row6 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		row7HashKey.codigo = row6.codigo ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							row7Struct row7 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
	                        		    	Object exprKeyValue_row8__vigencia = salida_disponibilidad_financiera.vigencia;
	                        		    	if(exprKeyValue_row8__vigencia == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_3 = true;
	                        		    	} else {
                        		    			row8HashKey.vigencia = (int)(Integer) exprKeyValue_row8__vigencia;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_row8__rubro = row7.id ;
	                        		    	if(exprKeyValue_row8__rubro == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_3 = true;
	                        		    	} else {
                        		    			row8HashKey.rubro = (int)(Integer) exprKeyValue_row8__rubro;
                        		    		}
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_3 || !tHash_Lookup_row8.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							row8Struct row8 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

salida_disponibilidad_apropiacion = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'salida_disponibilidad_apropiacion'
salida_disponibilidad_apropiacion_tmp.disponibilidad = salida_disponibilidad_financiera.id ;
salida_disponibilidad_apropiacion_tmp.apropiacion = row8.id ;
salida_disponibilidad_apropiacion_tmp.valor = row3.VALOR ;
salida_disponibilidad_apropiacion_tmp.fuente_financiamiento = 0;
salida_disponibilidad_apropiacion = salida_disponibilidad_apropiacion_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "salida_disponibilidad_apropiacion"
if(salida_disponibilidad_apropiacion != null) { 



	
	/**
	 * [tPostgresqlOutput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

			//salida_disponibilidad_apropiacion
			//salida_disponibilidad_apropiacion


			
				if(execStat){
					runStat.updateStatOnConnection("salida_disponibilidad_apropiacion"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_3 = false;
                    if(salida_disponibilidad_apropiacion.disponibilidad == null) {
pstmt_tPostgresqlOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tPostgresqlOutput_3.setInt(1, salida_disponibilidad_apropiacion.disponibilidad);
}

                    if(salida_disponibilidad_apropiacion.apropiacion == null) {
pstmt_tPostgresqlOutput_3.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tPostgresqlOutput_3.setInt(2, salida_disponibilidad_apropiacion.apropiacion);
}

                    if(salida_disponibilidad_apropiacion.valor == null) {
pstmt_tPostgresqlOutput_3.setNull(3, java.sql.Types.DOUBLE);
} else {pstmt_tPostgresqlOutput_3.setDouble(3, salida_disponibilidad_apropiacion.valor);
}

                    if(salida_disponibilidad_apropiacion.fuente_financiamiento == null) {
pstmt_tPostgresqlOutput_3.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tPostgresqlOutput_3.setInt(4, salida_disponibilidad_apropiacion.fuente_financiamiento);
}

			
    		pstmt_tPostgresqlOutput_3.addBatch();
    		nb_line_tPostgresqlOutput_3++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_3++;
    		  
    			if ((batchSize_tPostgresqlOutput_3 > 0) && (batchSize_tPostgresqlOutput_3 <= batchSizeCounter_tPostgresqlOutput_3)) {
                try {
						int countSum_tPostgresqlOutput_3 = 0;
						    
						for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
				    	
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_3){
				    	java.sql.SQLException ne_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getNextException(),sqle_tPostgresqlOutput_3=null;
				    	String errormessage_tPostgresqlOutput_3;
						if (ne_tPostgresqlOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_3 = new java.sql.SQLException(e_tPostgresqlOutput_3.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_3.getMessage(), ne_tPostgresqlOutput_3.getSQLState(), ne_tPostgresqlOutput_3.getErrorCode(), ne_tPostgresqlOutput_3);
							errormessage_tPostgresqlOutput_3 = sqle_tPostgresqlOutput_3.getMessage();
						}else{
							errormessage_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_3 = 0;
						for(int countEach_tPostgresqlOutput_3: e_tPostgresqlOutput_3.getUpdateCounts()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
						
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_3);
				    	
					}
    			}
    		
    		    commitCounter_tPostgresqlOutput_3++;
                if(commitEvery_tPostgresqlOutput_3 <= commitCounter_tPostgresqlOutput_3) {
                if ((batchSize_tPostgresqlOutput_3 > 0) && (batchSizeCounter_tPostgresqlOutput_3 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_3 = 0;
                		    
						for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
            	    	
                batchSizeCounter_tPostgresqlOutput_3 = 0;
               }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_3){
			    	java.sql.SQLException ne_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getNextException(),sqle_tPostgresqlOutput_3=null;
			    	String errormessage_tPostgresqlOutput_3;
					if (ne_tPostgresqlOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tPostgresqlOutput_3 = new java.sql.SQLException(e_tPostgresqlOutput_3.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_3.getMessage(), ne_tPostgresqlOutput_3.getSQLState(), ne_tPostgresqlOutput_3.getErrorCode(), ne_tPostgresqlOutput_3);
						errormessage_tPostgresqlOutput_3 = sqle_tPostgresqlOutput_3.getMessage();
					}else{
						errormessage_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getMessage();
					}
			    	
			    	int countSum_tPostgresqlOutput_3 = 0;
					for(int countEach_tPostgresqlOutput_3: e_tPostgresqlOutput_3.getUpdateCounts()) {
						countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
					}
					
			    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
			    	
			    	System.err.println(errormessage_tPostgresqlOutput_3);
			    	
				}
            }
                	conn_tPostgresqlOutput_3.commit();
                	
                	commitCounter_tPostgresqlOutput_3=0;
                }

 


	tos_count_tPostgresqlOutput_3++;

/**
 * [tPostgresqlOutput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_end ] stop
 */

} // End of branch "salida_disponibilidad_apropiacion"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tConvertType_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	

 



/**
 * [tConvertType_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";

	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";

	

}
}finally{
stmt_tOracleInput_2.close();

	if(conn_tOracleInput_2 != null && !conn_tOracleInput_2.isClosed()) {
	
			conn_tOracleInput_2.close();
			
	}
	
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tConvertType_2 end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	
      globalMap.put("tConvertType_2_NB_LINE", nb_line_tConvertType_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tConvertType_2", true);
end_Hash.put("tConvertType_2", System.currentTimeMillis());




/**
 * [tConvertType_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_salida_disponibilidad_financiera != null) {
						tHash_Lookup_salida_disponibilidad_financiera.endGet();
					}
					globalMap.remove( "tHash_Lookup_salida_disponibilidad_financiera" );

					
					
				
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



	    try {
				int countSum_tPostgresqlOutput_3 = 0;
				if (pstmt_tPostgresqlOutput_3 != null && batchSizeCounter_tPostgresqlOutput_3 > 0) {
						
					for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
						countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_3){
	    	java.sql.SQLException ne_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getNextException(),sqle_tPostgresqlOutput_3=null;
	    	String errormessage_tPostgresqlOutput_3;
			if (ne_tPostgresqlOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_3 = new java.sql.SQLException(e_tPostgresqlOutput_3.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_3.getMessage(), ne_tPostgresqlOutput_3.getSQLState(), ne_tPostgresqlOutput_3.getErrorCode(), ne_tPostgresqlOutput_3);
				errormessage_tPostgresqlOutput_3 = sqle_tPostgresqlOutput_3.getMessage();
			}else{
				errormessage_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_3 = 0;
			for(int countEach_tPostgresqlOutput_3: e_tPostgresqlOutput_3.getUpdateCounts()) {
				countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
			}
			
	    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_3);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_3 != null) {
        		
            pstmt_tPostgresqlOutput_3.close();
        }

			
			conn_tPostgresqlOutput_3.commit();
			
		
    	conn_tPostgresqlOutput_3 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_3", true);
    	

	nb_line_deleted_tPostgresqlOutput_3=nb_line_deleted_tPostgresqlOutput_3+ deletedCount_tPostgresqlOutput_3;
	nb_line_update_tPostgresqlOutput_3=nb_line_update_tPostgresqlOutput_3 + updatedCount_tPostgresqlOutput_3;
	nb_line_inserted_tPostgresqlOutput_3=nb_line_inserted_tPostgresqlOutput_3 + insertedCount_tPostgresqlOutput_3;
	nb_line_rejected_tPostgresqlOutput_3=nb_line_rejected_tPostgresqlOutput_3 + rejectedCount_tPostgresqlOutput_3;
	
        globalMap.put("tPostgresqlOutput_3_NB_LINE",nb_line_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_3);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("salida_disponibilidad_apropiacion"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_3", true);
end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_3 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_salida_disponibilidad_financiera"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";

	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tConvertType_2 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	

 



/**
 * [tConvertType_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_3")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_3")!=null){
				try {
					
					
					java.sql.Connection ctn_tPostgresqlOutput_3 = (java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_3");
					
					
            		
					ctn_tPostgresqlOutput_3.close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_3) {
					String errorMessage_tPostgresqlOutput_3 = "failed to close the connection in tPostgresqlOutput_3 :" + sqlEx_tPostgresqlOutput_3.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_3);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class salida_necesidad_administrativaStruct implements routines.system.IPersistableRow<salida_necesidad_administrativaStruct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public int numero;

				public int getNumero () {
					return this.numero;
				}
				
			    public int vigencia;

				public int getVigencia () {
					return this.vigencia;
				}
				
			    public String objeto;

				public String getObjeto () {
					return this.objeto;
				}
				
			    public java.util.Date fecha_solicitud;

				public java.util.Date getFecha_solicitud () {
					return this.fecha_solicitud;
				}
				
			    public double valor;

				public double getValor () {
					return this.valor;
				}
				
			    public String justificacion;

				public String getJustificacion () {
					return this.justificacion;
				}
				
			    public int unidad_ejecutora;

				public int getUnidad_ejecutora () {
					return this.unidad_ejecutora;
				}
				
			    public int modalidad_seleccion;

				public int getModalidad_seleccion () {
					return this.modalidad_seleccion;
				}
				
			    public int tipo_contrato_necesidad;

				public int getTipo_contrato_necesidad () {
					return this.tipo_contrato_necesidad;
				}
				
			    public int plan_anual_adquisiciones;

				public int getPlan_anual_adquisiciones () {
					return this.plan_anual_adquisiciones;
				}
				
			    public int tipo_financiacion_necesidad;

				public int getTipo_financiacion_necesidad () {
					return this.tipo_financiacion_necesidad;
				}
				
			    public int numero_elaboracion;

				public int getNumero_elaboracion () {
					return this.numero_elaboracion;
				}
				
			    public java.util.Date fecha_modificacion;

				public java.util.Date getFecha_modificacion () {
					return this.fecha_modificacion;
				}
				
			    public int estado_necesidad;

				public int getEstado_necesidad () {
					return this.estado_necesidad;
				}
				
			    public int supervisor;

				public int getSupervisor () {
					return this.supervisor;
				}
				
			    public int tipo_necesidad;

				public int getTipo_necesidad () {
					return this.tipo_necesidad;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_volcado_cdp.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_volcado_cdp.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
			        this.numero = dis.readInt();
					
			        this.vigencia = dis.readInt();
					
					this.objeto = readString(dis);
					
					this.fecha_solicitud = readDate(dis);
					
			        this.valor = dis.readDouble();
					
					this.justificacion = readString(dis);
					
			        this.unidad_ejecutora = dis.readInt();
					
			        this.modalidad_seleccion = dis.readInt();
					
			        this.tipo_contrato_necesidad = dis.readInt();
					
			        this.plan_anual_adquisiciones = dis.readInt();
					
			        this.tipo_financiacion_necesidad = dis.readInt();
					
			        this.numero_elaboracion = dis.readInt();
					
					this.fecha_modificacion = readDate(dis);
					
			        this.estado_necesidad = dis.readInt();
					
			        this.supervisor = dis.readInt();
					
			        this.tipo_necesidad = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// int
				
		            	dos.writeInt(this.numero);
					
					// int
				
		            	dos.writeInt(this.vigencia);
					
					// String
				
						writeString(this.objeto,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_solicitud,dos);
					
					// double
				
		            	dos.writeDouble(this.valor);
					
					// String
				
						writeString(this.justificacion,dos);
					
					// int
				
		            	dos.writeInt(this.unidad_ejecutora);
					
					// int
				
		            	dos.writeInt(this.modalidad_seleccion);
					
					// int
				
		            	dos.writeInt(this.tipo_contrato_necesidad);
					
					// int
				
		            	dos.writeInt(this.plan_anual_adquisiciones);
					
					// int
				
		            	dos.writeInt(this.tipo_financiacion_necesidad);
					
					// int
				
		            	dos.writeInt(this.numero_elaboracion);
					
					// java.util.Date
				
						writeDate(this.fecha_modificacion,dos);
					
					// int
				
		            	dos.writeInt(this.estado_necesidad);
					
					// int
				
		            	dos.writeInt(this.supervisor);
					
					// int
				
		            	dos.writeInt(this.tipo_necesidad);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",numero="+String.valueOf(numero));
		sb.append(",vigencia="+String.valueOf(vigencia));
		sb.append(",objeto="+objeto);
		sb.append(",fecha_solicitud="+String.valueOf(fecha_solicitud));
		sb.append(",valor="+String.valueOf(valor));
		sb.append(",justificacion="+justificacion);
		sb.append(",unidad_ejecutora="+String.valueOf(unidad_ejecutora));
		sb.append(",modalidad_seleccion="+String.valueOf(modalidad_seleccion));
		sb.append(",tipo_contrato_necesidad="+String.valueOf(tipo_contrato_necesidad));
		sb.append(",plan_anual_adquisiciones="+String.valueOf(plan_anual_adquisiciones));
		sb.append(",tipo_financiacion_necesidad="+String.valueOf(tipo_financiacion_necesidad));
		sb.append(",numero_elaboracion="+String.valueOf(numero_elaboracion));
		sb.append(",fecha_modificacion="+String.valueOf(fecha_modificacion));
		sb.append(",estado_necesidad="+String.valueOf(estado_necesidad));
		sb.append(",supervisor="+String.valueOf(supervisor));
		sb.append(",tipo_necesidad="+String.valueOf(tipo_necesidad));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salida_necesidad_administrativaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salida_disponibilidad_financieraStruct implements routines.system.IPersistableComparableLookupRow<salida_disponibilidad_financieraStruct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public int vigencia;

				public int getVigencia () {
					return this.vigencia;
				}
				
			    public int numero_disponibilidad;

				public int getNumero_disponibilidad () {
					return this.numero_disponibilidad;
				}
				
			    public int responsable;

				public int getResponsable () {
					return this.responsable;
				}
				
			    public java.util.Date fecha_registro;

				public java.util.Date getFecha_registro () {
					return this.fecha_registro;
				}
				
			    public short estado;

				public short getEstado () {
					return this.estado;
				}
				
			    public int solicitud;

				public int getSolicitud () {
					return this.solicitud;
				}
				
			    public Integer unidad_ejecutora;

				public Integer getUnidad_ejecutora () {
					return this.unidad_ejecutora;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.vigencia;
						
							result = prime * result + (int) this.numero_disponibilidad;
						
						result = prime * result + ((this.unidad_ejecutora == null) ? 0 : this.unidad_ejecutora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final salida_disponibilidad_financieraStruct other = (salida_disponibilidad_financieraStruct) obj;
		
						if (this.vigencia != other.vigencia)
							return false;
					
						if (this.numero_disponibilidad != other.numero_disponibilidad)
							return false;
					
						if (this.unidad_ejecutora == null) {
							if (other.unidad_ejecutora != null)
								return false;
						
						} else if (!this.unidad_ejecutora.equals(other.unidad_ejecutora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(salida_disponibilidad_financieraStruct other) {

		other.id = this.id;
	            other.vigencia = this.vigencia;
	            other.numero_disponibilidad = this.numero_disponibilidad;
	            other.responsable = this.responsable;
	            other.fecha_registro = this.fecha_registro;
	            other.estado = this.estado;
	            other.solicitud = this.solicitud;
	            other.unidad_ejecutora = this.unidad_ejecutora;
	            
	}

	public void copyKeysDataTo(salida_disponibilidad_financieraStruct other) {

		other.vigencia = this.vigencia;
	            	other.numero_disponibilidad = this.numero_disponibilidad;
	            	other.unidad_ejecutora = this.unidad_ejecutora;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
			        this.vigencia = dis.readInt();
					
			        this.numero_disponibilidad = dis.readInt();
					
						this.unidad_ejecutora = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.vigencia);
					
					// int
				
		            	dos.writeInt(this.numero_disponibilidad);
					
					// Integer
				
						writeInteger(this.unidad_ejecutora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
			            this.responsable = dis.readInt();
					
						this.fecha_registro = readDate(dis,ois);
					
			            this.estado = dis.readShort();
					
			            this.solicitud = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
		            	dos.writeInt(this.responsable);
					
						writeDate(this.fecha_registro, dos, oos);
					
		            	dos.writeShort(this.estado);
					
		            	dos.writeInt(this.solicitud);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",vigencia="+String.valueOf(vigencia));
		sb.append(",numero_disponibilidad="+String.valueOf(numero_disponibilidad));
		sb.append(",responsable="+String.valueOf(responsable));
		sb.append(",fecha_registro="+String.valueOf(fecha_registro));
		sb.append(",estado="+String.valueOf(estado));
		sb.append(",solicitud="+String.valueOf(solicitud));
		sb.append(",unidad_ejecutora="+String.valueOf(unidad_ejecutora));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salida_disponibilidad_financieraStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vigencia, other.vigencia);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.numero_disponibilidad, other.numero_disponibilidad);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.unidad_ejecutora, other.unidad_ejecutora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salida_disponibilidadFiStruct implements routines.system.IPersistableRow<salida_disponibilidadFiStruct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public int vigencia;

				public int getVigencia () {
					return this.vigencia;
				}
				
			    public int numero_disponibilidad;

				public int getNumero_disponibilidad () {
					return this.numero_disponibilidad;
				}
				
			    public int responsable;

				public int getResponsable () {
					return this.responsable;
				}
				
			    public java.util.Date fecha_registro;

				public java.util.Date getFecha_registro () {
					return this.fecha_registro;
				}
				
			    public short estado;

				public short getEstado () {
					return this.estado;
				}
				
			    public int solicitud;

				public int getSolicitud () {
					return this.solicitud;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final salida_disponibilidadFiStruct other = (salida_disponibilidadFiStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(salida_disponibilidadFiStruct other) {

		other.id = this.id;
	            other.vigencia = this.vigencia;
	            other.numero_disponibilidad = this.numero_disponibilidad;
	            other.responsable = this.responsable;
	            other.fecha_registro = this.fecha_registro;
	            other.estado = this.estado;
	            other.solicitud = this.solicitud;
	            
	}

	public void copyKeysDataTo(salida_disponibilidadFiStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
			        this.vigencia = dis.readInt();
					
			        this.numero_disponibilidad = dis.readInt();
					
			        this.responsable = dis.readInt();
					
					this.fecha_registro = readDate(dis);
					
			        this.estado = dis.readShort();
					
			        this.solicitud = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// int
				
		            	dos.writeInt(this.vigencia);
					
					// int
				
		            	dos.writeInt(this.numero_disponibilidad);
					
					// int
				
		            	dos.writeInt(this.responsable);
					
					// java.util.Date
				
						writeDate(this.fecha_registro,dos);
					
					// short
				
		            	dos.writeShort(this.estado);
					
					// int
				
		            	dos.writeInt(this.solicitud);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",vigencia="+String.valueOf(vigencia));
		sb.append(",numero_disponibilidad="+String.valueOf(numero_disponibilidad));
		sb.append(",responsable="+String.valueOf(responsable));
		sb.append(",fecha_registro="+String.valueOf(fecha_registro));
		sb.append(",estado="+String.valueOf(estado));
		sb.append(",solicitud="+String.valueOf(solicitud));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salida_disponibilidadFiStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salida_necesidadStruct implements routines.system.IPersistableRow<salida_necesidadStruct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public int numero;

				public int getNumero () {
					return this.numero;
				}
				
			    public int vigencia;

				public int getVigencia () {
					return this.vigencia;
				}
				
			    public String objeto;

				public String getObjeto () {
					return this.objeto;
				}
				
			    public java.util.Date fecha_solicitud;

				public java.util.Date getFecha_solicitud () {
					return this.fecha_solicitud;
				}
				
			    public double valor;

				public double getValor () {
					return this.valor;
				}
				
			    public String justificacion;

				public String getJustificacion () {
					return this.justificacion;
				}
				
			    public int unidad_ejecutora;

				public int getUnidad_ejecutora () {
					return this.unidad_ejecutora;
				}
				
			    public int modalidad_seleccion;

				public int getModalidad_seleccion () {
					return this.modalidad_seleccion;
				}
				
			    public int tipo_contrato_necesidad;

				public int getTipo_contrato_necesidad () {
					return this.tipo_contrato_necesidad;
				}
				
			    public int plan_anual_adquisiciones;

				public int getPlan_anual_adquisiciones () {
					return this.plan_anual_adquisiciones;
				}
				
			    public int tipo_financiacion_necesidad;

				public int getTipo_financiacion_necesidad () {
					return this.tipo_financiacion_necesidad;
				}
				
			    public int numero_elaboracion;

				public int getNumero_elaboracion () {
					return this.numero_elaboracion;
				}
				
			    public java.util.Date fecha_modificacion;

				public java.util.Date getFecha_modificacion () {
					return this.fecha_modificacion;
				}
				
			    public int estado_necesidad;

				public int getEstado_necesidad () {
					return this.estado_necesidad;
				}
				
			    public int supervisor;

				public int getSupervisor () {
					return this.supervisor;
				}
				
			    public int tipo_necesidad;

				public int getTipo_necesidad () {
					return this.tipo_necesidad;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_volcado_cdp.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_volcado_cdp.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
			        this.numero = dis.readInt();
					
			        this.vigencia = dis.readInt();
					
					this.objeto = readString(dis);
					
					this.fecha_solicitud = readDate(dis);
					
			        this.valor = dis.readDouble();
					
					this.justificacion = readString(dis);
					
			        this.unidad_ejecutora = dis.readInt();
					
			        this.modalidad_seleccion = dis.readInt();
					
			        this.tipo_contrato_necesidad = dis.readInt();
					
			        this.plan_anual_adquisiciones = dis.readInt();
					
			        this.tipo_financiacion_necesidad = dis.readInt();
					
			        this.numero_elaboracion = dis.readInt();
					
					this.fecha_modificacion = readDate(dis);
					
			        this.estado_necesidad = dis.readInt();
					
			        this.supervisor = dis.readInt();
					
			        this.tipo_necesidad = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// int
				
		            	dos.writeInt(this.numero);
					
					// int
				
		            	dos.writeInt(this.vigencia);
					
					// String
				
						writeString(this.objeto,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_solicitud,dos);
					
					// double
				
		            	dos.writeDouble(this.valor);
					
					// String
				
						writeString(this.justificacion,dos);
					
					// int
				
		            	dos.writeInt(this.unidad_ejecutora);
					
					// int
				
		            	dos.writeInt(this.modalidad_seleccion);
					
					// int
				
		            	dos.writeInt(this.tipo_contrato_necesidad);
					
					// int
				
		            	dos.writeInt(this.plan_anual_adquisiciones);
					
					// int
				
		            	dos.writeInt(this.tipo_financiacion_necesidad);
					
					// int
				
		            	dos.writeInt(this.numero_elaboracion);
					
					// java.util.Date
				
						writeDate(this.fecha_modificacion,dos);
					
					// int
				
		            	dos.writeInt(this.estado_necesidad);
					
					// int
				
		            	dos.writeInt(this.supervisor);
					
					// int
				
		            	dos.writeInt(this.tipo_necesidad);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",numero="+String.valueOf(numero));
		sb.append(",vigencia="+String.valueOf(vigencia));
		sb.append(",objeto="+objeto);
		sb.append(",fecha_solicitud="+String.valueOf(fecha_solicitud));
		sb.append(",valor="+String.valueOf(valor));
		sb.append(",justificacion="+justificacion);
		sb.append(",unidad_ejecutora="+String.valueOf(unidad_ejecutora));
		sb.append(",modalidad_seleccion="+String.valueOf(modalidad_seleccion));
		sb.append(",tipo_contrato_necesidad="+String.valueOf(tipo_contrato_necesidad));
		sb.append(",plan_anual_adquisiciones="+String.valueOf(plan_anual_adquisiciones));
		sb.append(",tipo_financiacion_necesidad="+String.valueOf(tipo_financiacion_necesidad));
		sb.append(",numero_elaboracion="+String.valueOf(numero_elaboracion));
		sb.append(",fecha_modificacion="+String.valueOf(fecha_modificacion));
		sb.append(",estado_necesidad="+String.valueOf(estado_necesidad));
		sb.append(",supervisor="+String.valueOf(supervisor));
		sb.append(",tipo_necesidad="+String.valueOf(tipo_necesidad));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salida_necesidadStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];

	
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}
				
			    public int CODIGO_COMPANIA;

				public int getCODIGO_COMPANIA () {
					return this.CODIGO_COMPANIA;
				}
				
			    public int CODIGO_UNIDAD_EJECUTORA;

				public int getCODIGO_UNIDAD_EJECUTORA () {
					return this.CODIGO_UNIDAD_EJECUTORA;
				}
				
			    public int NUMERO_DISPONIBILIDAD;

				public int getNUMERO_DISPONIBILIDAD () {
					return this.NUMERO_DISPONIBILIDAD;
				}
				
			    public int ID_RESPONSABLE_PRESUPUESTO;

				public int getID_RESPONSABLE_PRESUPUESTO () {
					return this.ID_RESPONSABLE_PRESUPUESTO;
				}
				
			    public BigDecimal ID_SOLICITANTE;

				public BigDecimal getID_SOLICITANTE () {
					return this.ID_SOLICITANTE;
				}
				
			    public java.util.Date FECHA_REGISTRO;

				public java.util.Date getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}
				
			    public BigDecimal NUMERO_IMPRESIONES;

				public BigDecimal getNUMERO_IMPRESIONES () {
					return this.NUMERO_IMPRESIONES;
				}
				
			    public BigDecimal MODALIDAD_GIRO;

				public BigDecimal getMODALIDAD_GIRO () {
					return this.MODALIDAD_GIRO;
				}
				
			    public BigDecimal PARA_MODIFICACION;

				public BigDecimal getPARA_MODIFICACION () {
					return this.PARA_MODIFICACION;
				}
				
			    public BigDecimal PARA_SUSPENSION;

				public BigDecimal getPARA_SUSPENSION () {
					return this.PARA_SUSPENSION;
				}
				
			    public BigDecimal APLICA_SUSPENSION;

				public BigDecimal getAPLICA_SUSPENSION () {
					return this.APLICA_SUSPENSION;
				}
				
			    public BigDecimal VIG_FUTURA;

				public BigDecimal getVIG_FUTURA () {
					return this.VIG_FUTURA;
				}
				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}
				
			    public java.util.Date FECHA_EXPEDICION;

				public java.util.Date getFECHA_EXPEDICION () {
					return this.FECHA_EXPEDICION;
				}
				
			    public String OBJETO;

				public String getOBJETO () {
					return this.OBJETO;
				}
				
			    public java.util.Date FECHA_EXPIRACION;

				public java.util.Date getFECHA_EXPIRACION () {
					return this.FECHA_EXPIRACION;
				}
				
			    public String NUMERO_OFICIO;

				public String getNUMERO_OFICIO () {
					return this.NUMERO_OFICIO;
				}
				
			    public java.util.Date FECHA_OFICIO;

				public java.util.Date getFECHA_OFICIO () {
					return this.FECHA_OFICIO;
				}
				
			    public String REGISTRO_SIPD;

				public String getREGISTRO_SIPD () {
					return this.REGISTRO_SIPD;
				}
				
			    public BigDecimal ID_LIMAY;

				public BigDecimal getID_LIMAY () {
					return this.ID_LIMAY;
				}
				
			    public String USUARIO_ELABORO;

				public String getUSUARIO_ELABORO () {
					return this.USUARIO_ELABORO;
				}
				
			    public String CONVENIO;

				public String getCONVENIO () {
					return this.CONVENIO;
				}
				
			    public BigDecimal NUM_SOL_ADQ;

				public BigDecimal getNUM_SOL_ADQ () {
					return this.NUM_SOL_ADQ;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_volcado_cdp.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_volcado_cdp.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
			        this.VIGENCIA = dis.readInt();
					
			        this.CODIGO_COMPANIA = dis.readInt();
					
			        this.CODIGO_UNIDAD_EJECUTORA = dis.readInt();
					
			        this.NUMERO_DISPONIBILIDAD = dis.readInt();
					
			        this.ID_RESPONSABLE_PRESUPUESTO = dis.readInt();
					
						this.ID_SOLICITANTE = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readDate(dis);
					
						this.NUMERO_IMPRESIONES = (BigDecimal) dis.readObject();
					
						this.MODALIDAD_GIRO = (BigDecimal) dis.readObject();
					
						this.PARA_MODIFICACION = (BigDecimal) dis.readObject();
					
						this.PARA_SUSPENSION = (BigDecimal) dis.readObject();
					
						this.APLICA_SUSPENSION = (BigDecimal) dis.readObject();
					
						this.VIG_FUTURA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FECHA_EXPEDICION = readDate(dis);
					
					this.OBJETO = readString(dis);
					
					this.FECHA_EXPIRACION = readDate(dis);
					
					this.NUMERO_OFICIO = readString(dis);
					
					this.FECHA_OFICIO = readDate(dis);
					
					this.REGISTRO_SIPD = readString(dis);
					
						this.ID_LIMAY = (BigDecimal) dis.readObject();
					
					this.USUARIO_ELABORO = readString(dis);
					
					this.CONVENIO = readString(dis);
					
						this.NUM_SOL_ADQ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// int
				
		            	dos.writeInt(this.CODIGO_COMPANIA);
					
					// int
				
		            	dos.writeInt(this.CODIGO_UNIDAD_EJECUTORA);
					
					// int
				
		            	dos.writeInt(this.NUMERO_DISPONIBILIDAD);
					
					// int
				
		            	dos.writeInt(this.ID_RESPONSABLE_PRESUPUESTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_SOLICITANTE);
					
					// java.util.Date
				
						writeDate(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERO_IMPRESIONES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MODALIDAD_GIRO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PARA_MODIFICACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PARA_SUSPENSION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLICA_SUSPENSION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VIG_FUTURA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION,dos);
					
					// String
				
						writeString(this.OBJETO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPIRACION,dos);
					
					// String
				
						writeString(this.NUMERO_OFICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_OFICIO,dos);
					
					// String
				
						writeString(this.REGISTRO_SIPD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_LIMAY);
					
					// String
				
						writeString(this.USUARIO_ELABORO,dos);
					
					// String
				
						writeString(this.CONVENIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUM_SOL_ADQ);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",CODIGO_COMPANIA="+String.valueOf(CODIGO_COMPANIA));
		sb.append(",CODIGO_UNIDAD_EJECUTORA="+String.valueOf(CODIGO_UNIDAD_EJECUTORA));
		sb.append(",NUMERO_DISPONIBILIDAD="+String.valueOf(NUMERO_DISPONIBILIDAD));
		sb.append(",ID_RESPONSABLE_PRESUPUESTO="+String.valueOf(ID_RESPONSABLE_PRESUPUESTO));
		sb.append(",ID_SOLICITANTE="+String.valueOf(ID_SOLICITANTE));
		sb.append(",FECHA_REGISTRO="+String.valueOf(FECHA_REGISTRO));
		sb.append(",NUMERO_IMPRESIONES="+String.valueOf(NUMERO_IMPRESIONES));
		sb.append(",MODALIDAD_GIRO="+String.valueOf(MODALIDAD_GIRO));
		sb.append(",PARA_MODIFICACION="+String.valueOf(PARA_MODIFICACION));
		sb.append(",PARA_SUSPENSION="+String.valueOf(PARA_SUSPENSION));
		sb.append(",APLICA_SUSPENSION="+String.valueOf(APLICA_SUSPENSION));
		sb.append(",VIG_FUTURA="+String.valueOf(VIG_FUTURA));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FECHA_EXPEDICION="+String.valueOf(FECHA_EXPEDICION));
		sb.append(",OBJETO="+OBJETO);
		sb.append(",FECHA_EXPIRACION="+String.valueOf(FECHA_EXPIRACION));
		sb.append(",NUMERO_OFICIO="+NUMERO_OFICIO);
		sb.append(",FECHA_OFICIO="+String.valueOf(FECHA_OFICIO));
		sb.append(",REGISTRO_SIPD="+REGISTRO_SIPD);
		sb.append(",ID_LIMAY="+String.valueOf(ID_LIMAY));
		sb.append(",USUARIO_ELABORO="+USUARIO_ELABORO);
		sb.append(",CONVENIO="+CONVENIO);
		sb.append(",NUM_SOL_ADQ="+String.valueOf(NUM_SOL_ADQ));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];

	
			    public BigDecimal VIGENCIA;

				public BigDecimal getVIGENCIA () {
					return this.VIGENCIA;
				}
				
			    public String CODIGO_COMPANIA;

				public String getCODIGO_COMPANIA () {
					return this.CODIGO_COMPANIA;
				}
				
			    public String CODIGO_UNIDAD_EJECUTORA;

				public String getCODIGO_UNIDAD_EJECUTORA () {
					return this.CODIGO_UNIDAD_EJECUTORA;
				}
				
			    public BigDecimal NUMERO_DISPONIBILIDAD;

				public BigDecimal getNUMERO_DISPONIBILIDAD () {
					return this.NUMERO_DISPONIBILIDAD;
				}
				
			    public BigDecimal ID_RESPONSABLE_PRESUPUESTO;

				public BigDecimal getID_RESPONSABLE_PRESUPUESTO () {
					return this.ID_RESPONSABLE_PRESUPUESTO;
				}
				
			    public BigDecimal ID_SOLICITANTE;

				public BigDecimal getID_SOLICITANTE () {
					return this.ID_SOLICITANTE;
				}
				
			    public java.util.Date FECHA_REGISTRO;

				public java.util.Date getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}
				
			    public BigDecimal NUMERO_IMPRESIONES;

				public BigDecimal getNUMERO_IMPRESIONES () {
					return this.NUMERO_IMPRESIONES;
				}
				
			    public BigDecimal MODALIDAD_GIRO;

				public BigDecimal getMODALIDAD_GIRO () {
					return this.MODALIDAD_GIRO;
				}
				
			    public BigDecimal PARA_MODIFICACION;

				public BigDecimal getPARA_MODIFICACION () {
					return this.PARA_MODIFICACION;
				}
				
			    public BigDecimal PARA_SUSPENSION;

				public BigDecimal getPARA_SUSPENSION () {
					return this.PARA_SUSPENSION;
				}
				
			    public BigDecimal APLICA_SUSPENSION;

				public BigDecimal getAPLICA_SUSPENSION () {
					return this.APLICA_SUSPENSION;
				}
				
			    public BigDecimal VIG_FUTURA;

				public BigDecimal getVIG_FUTURA () {
					return this.VIG_FUTURA;
				}
				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}
				
			    public java.util.Date FECHA_EXPEDICION;

				public java.util.Date getFECHA_EXPEDICION () {
					return this.FECHA_EXPEDICION;
				}
				
			    public String OBJETO;

				public String getOBJETO () {
					return this.OBJETO;
				}
				
			    public java.util.Date FECHA_EXPIRACION;

				public java.util.Date getFECHA_EXPIRACION () {
					return this.FECHA_EXPIRACION;
				}
				
			    public String NUMERO_OFICIO;

				public String getNUMERO_OFICIO () {
					return this.NUMERO_OFICIO;
				}
				
			    public java.util.Date FECHA_OFICIO;

				public java.util.Date getFECHA_OFICIO () {
					return this.FECHA_OFICIO;
				}
				
			    public String REGISTRO_SIPD;

				public String getREGISTRO_SIPD () {
					return this.REGISTRO_SIPD;
				}
				
			    public BigDecimal ID_LIMAY;

				public BigDecimal getID_LIMAY () {
					return this.ID_LIMAY;
				}
				
			    public String USUARIO_ELABORO;

				public String getUSUARIO_ELABORO () {
					return this.USUARIO_ELABORO;
				}
				
			    public String CONVENIO;

				public String getCONVENIO () {
					return this.CONVENIO;
				}
				
			    public BigDecimal NUM_SOL_ADQ;

				public BigDecimal getNUM_SOL_ADQ () {
					return this.NUM_SOL_ADQ;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_volcado_cdp.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_volcado_cdp.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
						this.VIGENCIA = (BigDecimal) dis.readObject();
					
					this.CODIGO_COMPANIA = readString(dis);
					
					this.CODIGO_UNIDAD_EJECUTORA = readString(dis);
					
						this.NUMERO_DISPONIBILIDAD = (BigDecimal) dis.readObject();
					
						this.ID_RESPONSABLE_PRESUPUESTO = (BigDecimal) dis.readObject();
					
						this.ID_SOLICITANTE = (BigDecimal) dis.readObject();
					
					this.FECHA_REGISTRO = readDate(dis);
					
						this.NUMERO_IMPRESIONES = (BigDecimal) dis.readObject();
					
						this.MODALIDAD_GIRO = (BigDecimal) dis.readObject();
					
						this.PARA_MODIFICACION = (BigDecimal) dis.readObject();
					
						this.PARA_SUSPENSION = (BigDecimal) dis.readObject();
					
						this.APLICA_SUSPENSION = (BigDecimal) dis.readObject();
					
						this.VIG_FUTURA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FECHA_EXPEDICION = readDate(dis);
					
					this.OBJETO = readString(dis);
					
					this.FECHA_EXPIRACION = readDate(dis);
					
					this.NUMERO_OFICIO = readString(dis);
					
					this.FECHA_OFICIO = readDate(dis);
					
					this.REGISTRO_SIPD = readString(dis);
					
						this.ID_LIMAY = (BigDecimal) dis.readObject();
					
					this.USUARIO_ELABORO = readString(dis);
					
					this.CONVENIO = readString(dis);
					
						this.NUM_SOL_ADQ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.VIGENCIA);
					
					// String
				
						writeString(this.CODIGO_COMPANIA,dos);
					
					// String
				
						writeString(this.CODIGO_UNIDAD_EJECUTORA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERO_DISPONIBILIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_RESPONSABLE_PRESUPUESTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_SOLICITANTE);
					
					// java.util.Date
				
						writeDate(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERO_IMPRESIONES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MODALIDAD_GIRO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PARA_MODIFICACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PARA_SUSPENSION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLICA_SUSPENSION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VIG_FUTURA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION,dos);
					
					// String
				
						writeString(this.OBJETO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPIRACION,dos);
					
					// String
				
						writeString(this.NUMERO_OFICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_OFICIO,dos);
					
					// String
				
						writeString(this.REGISTRO_SIPD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_LIMAY);
					
					// String
				
						writeString(this.USUARIO_ELABORO,dos);
					
					// String
				
						writeString(this.CONVENIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUM_SOL_ADQ);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",CODIGO_COMPANIA="+CODIGO_COMPANIA);
		sb.append(",CODIGO_UNIDAD_EJECUTORA="+CODIGO_UNIDAD_EJECUTORA);
		sb.append(",NUMERO_DISPONIBILIDAD="+String.valueOf(NUMERO_DISPONIBILIDAD));
		sb.append(",ID_RESPONSABLE_PRESUPUESTO="+String.valueOf(ID_RESPONSABLE_PRESUPUESTO));
		sb.append(",ID_SOLICITANTE="+String.valueOf(ID_SOLICITANTE));
		sb.append(",FECHA_REGISTRO="+String.valueOf(FECHA_REGISTRO));
		sb.append(",NUMERO_IMPRESIONES="+String.valueOf(NUMERO_IMPRESIONES));
		sb.append(",MODALIDAD_GIRO="+String.valueOf(MODALIDAD_GIRO));
		sb.append(",PARA_MODIFICACION="+String.valueOf(PARA_MODIFICACION));
		sb.append(",PARA_SUSPENSION="+String.valueOf(PARA_SUSPENSION));
		sb.append(",APLICA_SUSPENSION="+String.valueOf(APLICA_SUSPENSION));
		sb.append(",VIG_FUTURA="+String.valueOf(VIG_FUTURA));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FECHA_EXPEDICION="+String.valueOf(FECHA_EXPEDICION));
		sb.append(",OBJETO="+OBJETO);
		sb.append(",FECHA_EXPIRACION="+String.valueOf(FECHA_EXPIRACION));
		sb.append(",NUMERO_OFICIO="+NUMERO_OFICIO);
		sb.append(",FECHA_OFICIO="+String.valueOf(FECHA_OFICIO));
		sb.append(",REGISTRO_SIPD="+REGISTRO_SIPD);
		sb.append(",ID_LIMAY="+String.valueOf(ID_LIMAY));
		sb.append(",USUARIO_ELABORO="+USUARIO_ELABORO);
		sb.append(",CONVENIO="+CONVENIO);
		sb.append(",NUM_SOL_ADQ="+String.valueOf(NUM_SOL_ADQ));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
salida_necesidadStruct salida_necesidad = new salida_necesidadStruct();
salida_necesidad_administrativaStruct salida_necesidad_administrativa = new salida_necesidad_administrativaStruct();
salida_disponibilidadFiStruct salida_disponibilidadFi = new salida_disponibilidadFiStruct();
salida_disponibilidad_financieraStruct salida_disponibilidad_financiera = new salida_disponibilidad_financieraStruct();







	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("salida_necesidad_administrativa" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = "administrativa";
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "necesidad";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "necesidad";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+"172.20.0.2"+":"+"5432"+"/"+"test";
    dbUser_tPostgresqlOutput_1 = "test";
 
	final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("f3e656537b1a4d67");

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 1000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"id\",\"numero\",\"vigencia\",\"objeto\",\"fecha_solicitud\",\"valor\",\"justificacion\",\"unidad_ejecutora\",\"modalidad_seleccion\",\"tipo_contrato_necesidad\",\"plan_anual_adquisiciones\",\"tipo_financiacion_necesidad\",\"numero_elaboracion\",\"fecha_modificacion\",\"estado_necesidad\",\"supervisor\",\"tipo_necesidad\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */




	
	/**
	 * [tPostgresqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_2", false);
		start_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("salida_disponibilidadFi" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_2().limitLog4jByte();





String dbschema_tPostgresqlOutput_2 = null;
	dbschema_tPostgresqlOutput_2 = "financiera";
	

String tableName_tPostgresqlOutput_2 = null;
if(dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2.trim().length() == 0) {
	tableName_tPostgresqlOutput_2 = "disponibilidad";
} else {
	tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2 + "\".\"" + "disponibilidad";
}

int nb_line_tPostgresqlOutput_2 = 0;
int nb_line_update_tPostgresqlOutput_2 = 0;
int nb_line_inserted_tPostgresqlOutput_2 = 0;
int nb_line_deleted_tPostgresqlOutput_2 = 0;
int nb_line_rejected_tPostgresqlOutput_2 = 0;

int deletedCount_tPostgresqlOutput_2=0;
int updatedCount_tPostgresqlOutput_2=0;
int insertedCount_tPostgresqlOutput_2=0;
int rejectedCount_tPostgresqlOutput_2=0;

boolean whetherReject_tPostgresqlOutput_2 = false;

java.sql.Connection conn_tPostgresqlOutput_2 = null;
String dbUser_tPostgresqlOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_2 = "jdbc:postgresql://"+"172.20.0.2"+":"+"5432"+"/"+"test";
    dbUser_tPostgresqlOutput_2 = "test";
 
	final String decryptedPassword_tPostgresqlOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("f3e656537b1a4d67");

    String dbPwd_tPostgresqlOutput_2 = decryptedPassword_tPostgresqlOutput_2;

    conn_tPostgresqlOutput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_2,dbUser_tPostgresqlOutput_2,dbPwd_tPostgresqlOutput_2);
	
	resourceMap.put("conn_tPostgresqlOutput_2", conn_tPostgresqlOutput_2);
        conn_tPostgresqlOutput_2.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_2 = 1000;
        int commitCounter_tPostgresqlOutput_2 = 0;


   int batchSize_tPostgresqlOutput_2 = 10000;
   int batchSizeCounter_tPostgresqlOutput_2=0;

int count_tPostgresqlOutput_2=0;
	    String insert_tPostgresqlOutput_2 = "INSERT INTO \"" + tableName_tPostgresqlOutput_2 + "\" (\"id\",\"vigencia\",\"numero_disponibilidad\",\"responsable\",\"fecha_registro\",\"estado\",\"solicitud\") VALUES (?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(insert_tPostgresqlOutput_2);
	    

 



/**
 * [tPostgresqlOutput_2 begin ] stop
 */




	
	/**
	 * [tAdvancedHash_salida_disponibilidad_financiera begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_salida_disponibilidad_financiera", false);
		start_Hash.put("tAdvancedHash_salida_disponibilidad_financiera", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_salida_disponibilidad_financiera";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("salida_disponibilidad_financiera" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_salida_disponibilidad_financiera = 0;
		
    	class BytesLimit65535_tAdvancedHash_salida_disponibilidad_financiera{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_salida_disponibilidad_financiera().limitLog4jByte();

			   		// connection name:salida_disponibilidad_financiera
			   		// source node:tMap_2 - inputs:(salida_necesidad) outputs:(salida_necesidad_administrativa,salida_disponibilidad_financiera,salida_disponibilidadFi,salida_disponibilidad_financiera) | target node:tAdvancedHash_salida_disponibilidad_financiera - inputs:(salida_disponibilidad_financiera) outputs:()
			   		// linked node: tMap_3 - inputs:(row3,salida_disponibilidad_financiera,row6,row7,row8) outputs:(salida_disponibilidad_apropiacion)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_salida_disponibilidad_financiera = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<salida_disponibilidad_financieraStruct> tHash_Lookup_salida_disponibilidad_financiera =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<salida_disponibilidad_financieraStruct>getLookup(matchingModeEnum_salida_disponibilidad_financiera);
	   						   
		   	   	   globalMap.put("tHash_Lookup_salida_disponibilidad_financiera", tHash_Lookup_salida_disponibilidad_financiera);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_salida_disponibilidad_financiera begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("salida_necesidad" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
salida_necesidad_administrativaStruct salida_necesidad_administrativa_tmp = new salida_necesidad_administrativaStruct();
salida_disponibilidad_financieraStruct salida_disponibilidad_financiera_tmp = new salida_disponibilidad_financieraStruct();
salida_disponibilidadFiStruct salida_disponibilidadFi_tmp = new salida_disponibilidadFiStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
salida_necesidadStruct salida_necesidad_tmp = new salida_necesidadStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tConvertType_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_1", false);
		start_Hash.put("tConvertType_1", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tConvertType_1 = 0;
		
    	class BytesLimit65535_tConvertType_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tConvertType_1().limitLog4jByte();
	int nb_line_tConvertType_1 = 0;  
 



/**
 * [tConvertType_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";

	
		int tos_count_tOracleInput_1 = 0;
		
    	class BytesLimit65535_tOracleInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tOracleInput_1().limitLog4jByte();
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				String driverClass_tOracleInput_1 = "oracle.jdbc.driver.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_1);
				
			String url_tOracleInput_1 = null;
				url_tOracleInput_1 = "jdbc:oracle:thin:@" + "10.20.0.7" + ":" + "1521" + ":" + "UD";

				String dbUser_tOracleInput_1 = "SICGEFAD";

				

				 
	final String decryptedPassword_tOracleInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("cd471b85ddbdbd5b7eb697d135b1c956f4f7aba1746784ea");

				String dbPwd_tOracleInput_1 = decryptedPassword_tOracleInput_1;

				
					conn_tOracleInput_1 = java.sql.DriverManager.getConnection(url_tOracleInput_1,dbUser_tOracleInput_1,dbPwd_tOracleInput_1);
				java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_1.next()) {
					sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
				}
                                if (!(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                                }
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT * FROM PR.PR_DISPONIBILIDADES WHERE NUMERO_DISPONIBILIDAD = "+context.disponibilidad+" AND VIGENCIA = "+context.vigencia;
			

            	globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);
		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row1.VIGENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row1.VIGENCIA = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row1.CODIGO_COMPANIA = null;
							} else {
	                         		
        	row1.CODIGO_COMPANIA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row1.CODIGO_UNIDAD_EJECUTORA = null;
							} else {
	                         		
        	row1.CODIGO_UNIDAD_EJECUTORA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row1.NUMERO_DISPONIBILIDAD = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(4) != null) {
						row1.NUMERO_DISPONIBILIDAD = rs_tOracleInput_1.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row1.ID_RESPONSABLE_PRESUPUESTO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(5) != null) {
						row1.ID_RESPONSABLE_PRESUPUESTO = rs_tOracleInput_1.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row1.ID_SOLICITANTE = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(6) != null) {
						row1.ID_SOLICITANTE = rs_tOracleInput_1.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row1.FECHA_REGISTRO = null;
							} else {
										
			row1.FECHA_REGISTRO = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 7);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row1.NUMERO_IMPRESIONES = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(8) != null) {
						row1.NUMERO_IMPRESIONES = rs_tOracleInput_1.getBigDecimal(8);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row1.MODALIDAD_GIRO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(9) != null) {
						row1.MODALIDAD_GIRO = rs_tOracleInput_1.getBigDecimal(9);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row1.PARA_MODIFICACION = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(10) != null) {
						row1.PARA_MODIFICACION = rs_tOracleInput_1.getBigDecimal(10);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 11) {
								row1.PARA_SUSPENSION = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(11) != null) {
						row1.PARA_SUSPENSION = rs_tOracleInput_1.getBigDecimal(11);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 12) {
								row1.APLICA_SUSPENSION = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(12) != null) {
						row1.APLICA_SUSPENSION = rs_tOracleInput_1.getBigDecimal(12);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 13) {
								row1.VIG_FUTURA = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(13) != null) {
						row1.VIG_FUTURA = rs_tOracleInput_1.getBigDecimal(13);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 14) {
								row1.ESTADO = null;
							} else {
	                         		
        	row1.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 15) {
								row1.FECHA_EXPEDICION = null;
							} else {
										
			row1.FECHA_EXPEDICION = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 15);
		                    }
							if(colQtyInRs_tOracleInput_1 < 16) {
								row1.OBJETO = null;
							} else {
	                         		
        	row1.OBJETO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 17) {
								row1.FECHA_EXPIRACION = null;
							} else {
										
			row1.FECHA_EXPIRACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 17);
		                    }
							if(colQtyInRs_tOracleInput_1 < 18) {
								row1.NUMERO_OFICIO = null;
							} else {
	                         		
        	row1.NUMERO_OFICIO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 18, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 19) {
								row1.FECHA_OFICIO = null;
							} else {
										
			row1.FECHA_OFICIO = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 19);
		                    }
							if(colQtyInRs_tOracleInput_1 < 20) {
								row1.REGISTRO_SIPD = null;
							} else {
	                         		
        	row1.REGISTRO_SIPD = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 21) {
								row1.ID_LIMAY = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(21) != null) {
						row1.ID_LIMAY = rs_tOracleInput_1.getBigDecimal(21);
					} else {
				
						row1.ID_LIMAY = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 22) {
								row1.USUARIO_ELABORO = null;
							} else {
	                         		
        	row1.USUARIO_ELABORO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 23) {
								row1.CONVENIO = null;
							} else {
	                         		
        	row1.CONVENIO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 24) {
								row1.NUM_SOL_ADQ = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(24) != null) {
						row1.NUM_SOL_ADQ = rs_tOracleInput_1.getBigDecimal(24);
					} else {
				
						row1.NUM_SOL_ADQ = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";

	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";

	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_1 main ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		


  row2 = new row2Struct();
  boolean bHasError_tConvertType_1 = false;             
          try {
              row2.VIGENCIA=TypeConvert.BigDecimal2int(row1.VIGENCIA);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.CODIGO_COMPANIA=TypeConvert.String2int(row1.CODIGO_COMPANIA);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.CODIGO_UNIDAD_EJECUTORA=TypeConvert.String2int(row1.CODIGO_UNIDAD_EJECUTORA);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.NUMERO_DISPONIBILIDAD=TypeConvert.BigDecimal2int(row1.NUMERO_DISPONIBILIDAD);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.ID_RESPONSABLE_PRESUPUESTO=TypeConvert.BigDecimal2int(row1.ID_RESPONSABLE_PRESUPUESTO);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.ID_SOLICITANTE=TypeConvert.BigDecimal2BigDecimal(row1.ID_SOLICITANTE);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.FECHA_REGISTRO=TypeConvert.Date2Date(row1.FECHA_REGISTRO);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.NUMERO_IMPRESIONES=TypeConvert.BigDecimal2BigDecimal(row1.NUMERO_IMPRESIONES);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.MODALIDAD_GIRO=TypeConvert.BigDecimal2BigDecimal(row1.MODALIDAD_GIRO);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.PARA_MODIFICACION=TypeConvert.BigDecimal2BigDecimal(row1.PARA_MODIFICACION);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.PARA_SUSPENSION=TypeConvert.BigDecimal2BigDecimal(row1.PARA_SUSPENSION);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.APLICA_SUSPENSION=TypeConvert.BigDecimal2BigDecimal(row1.APLICA_SUSPENSION);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.VIG_FUTURA=TypeConvert.BigDecimal2BigDecimal(row1.VIG_FUTURA);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.ESTADO=TypeConvert.String2String(row1.ESTADO);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.FECHA_EXPEDICION=TypeConvert.Date2Date(row1.FECHA_EXPEDICION);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.OBJETO=TypeConvert.String2String(row1.OBJETO);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.FECHA_EXPIRACION=TypeConvert.Date2Date(row1.FECHA_EXPIRACION);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.NUMERO_OFICIO=TypeConvert.String2String(row1.NUMERO_OFICIO);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.FECHA_OFICIO=TypeConvert.Date2Date(row1.FECHA_OFICIO);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.REGISTRO_SIPD=TypeConvert.String2String(row1.REGISTRO_SIPD);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.ID_LIMAY=TypeConvert.BigDecimal2BigDecimal(row1.ID_LIMAY);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.USUARIO_ELABORO=TypeConvert.String2String(row1.USUARIO_ELABORO);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.CONVENIO=TypeConvert.String2String(row1.CONVENIO);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.NUM_SOL_ADQ=TypeConvert.BigDecimal2BigDecimal(row1.NUM_SOL_ADQ);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_1) {row2 = null;}

  nb_line_tConvertType_1 ++ ;
 


	tos_count_tConvertType_1++;

/**
 * [tConvertType_1 main ] stop
 */
	
	/**
	 * [tConvertType_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

salida_necesidad = null;


// # Output table : 'salida_necesidad'
salida_necesidad_tmp.id = context.curr_id;
salida_necesidad_tmp.numero = row2.NUMERO_DISPONIBILIDAD ;
salida_necesidad_tmp.vigencia = row2.VIGENCIA ;
salida_necesidad_tmp.objeto = row2.OBJETO == null ? "N/A" : StringHandling.LEFT(StringHandling.TRIM(row2.OBJETO),680) ;
salida_necesidad_tmp.fecha_solicitud = row2.FECHA_REGISTRO ;
salida_necesidad_tmp.valor = 0.0;
salida_necesidad_tmp.justificacion = row2.OBJETO == null ? "N/A" : StringHandling.LEFT(StringHandling.TRIM(row2.OBJETO),570) ;
salida_necesidad_tmp.unidad_ejecutora = row2.CODIGO_UNIDAD_EJECUTORA ;
salida_necesidad_tmp.modalidad_seleccion = 8;
salida_necesidad_tmp.tipo_contrato_necesidad = 2;
salida_necesidad_tmp.plan_anual_adquisiciones = 0;
salida_necesidad_tmp.tipo_financiacion_necesidad = 1;
salida_necesidad_tmp.numero_elaboracion = Numeric.sequence("1",1,1) ;
salida_necesidad_tmp.fecha_modificacion = row2.FECHA_REGISTRO  ;
salida_necesidad_tmp.estado_necesidad = 7;
salida_necesidad_tmp.supervisor = 0;
salida_necesidad_tmp.tipo_necesidad = 1;
salida_necesidad = salida_necesidad_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "salida_necesidad"
if(salida_necesidad != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//salida_necesidad
			//salida_necesidad


			
				if(execStat){
					runStat.updateStatOnConnection("salida_necesidad"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

salida_necesidad_administrativa = null;
salida_disponibilidad_financiera = null;
salida_disponibilidadFi = null;


// # Output table : 'salida_necesidad_administrativa'
salida_necesidad_administrativa_tmp.id = salida_necesidad.id;
salida_necesidad_administrativa_tmp.numero = salida_necesidad.numero;
salida_necesidad_administrativa_tmp.vigencia = salida_necesidad.vigencia;
salida_necesidad_administrativa_tmp.objeto = salida_necesidad.objeto;
salida_necesidad_administrativa_tmp.fecha_solicitud = salida_necesidad.fecha_solicitud;
salida_necesidad_administrativa_tmp.valor = salida_necesidad.valor;
salida_necesidad_administrativa_tmp.justificacion = salida_necesidad.justificacion;
salida_necesidad_administrativa_tmp.unidad_ejecutora = salida_necesidad.unidad_ejecutora;
salida_necesidad_administrativa_tmp.modalidad_seleccion = salida_necesidad.modalidad_seleccion;
salida_necesidad_administrativa_tmp.tipo_contrato_necesidad = salida_necesidad.tipo_contrato_necesidad;
salida_necesidad_administrativa_tmp.plan_anual_adquisiciones = salida_necesidad.plan_anual_adquisiciones;
salida_necesidad_administrativa_tmp.tipo_financiacion_necesidad = salida_necesidad.tipo_financiacion_necesidad;
salida_necesidad_administrativa_tmp.numero_elaboracion = salida_necesidad.numero_elaboracion;
salida_necesidad_administrativa_tmp.fecha_modificacion = salida_necesidad.fecha_modificacion;
salida_necesidad_administrativa_tmp.estado_necesidad = salida_necesidad.estado_necesidad;
salida_necesidad_administrativa_tmp.supervisor = salida_necesidad.supervisor;
salida_necesidad_administrativa_tmp.tipo_necesidad = salida_necesidad.tipo_necesidad;
salida_necesidad_administrativa = salida_necesidad_administrativa_tmp;

// # Output table : 'salida_disponibilidad_financiera'
salida_disponibilidad_financiera_tmp.id = salida_necesidad.id ;
salida_disponibilidad_financiera_tmp.vigencia = salida_necesidad.vigencia ;
salida_disponibilidad_financiera_tmp.numero_disponibilidad = salida_necesidad.numero ;
salida_disponibilidad_financiera_tmp.responsable = salida_necesidad.supervisor ;
salida_disponibilidad_financiera_tmp.fecha_registro = salida_necesidad.fecha_solicitud ;
salida_disponibilidad_financiera_tmp.estado = 1;
salida_disponibilidad_financiera_tmp.solicitud = salida_necesidad.id ;
salida_disponibilidad_financiera_tmp.unidad_ejecutora = salida_necesidad.unidad_ejecutora ;
salida_disponibilidad_financiera = salida_disponibilidad_financiera_tmp;

// # Output table : 'salida_disponibilidadFi'
salida_disponibilidadFi_tmp.id = salida_necesidad.id ;
salida_disponibilidadFi_tmp.vigencia = salida_necesidad.vigencia ;
salida_disponibilidadFi_tmp.numero_disponibilidad = salida_necesidad.numero ;
salida_disponibilidadFi_tmp.responsable = salida_necesidad.supervisor ;
salida_disponibilidadFi_tmp.fecha_registro = salida_necesidad.fecha_solicitud ;
salida_disponibilidadFi_tmp.estado = 1;
salida_disponibilidadFi_tmp.solicitud = salida_necesidad.id ;
salida_disponibilidadFi = salida_disponibilidadFi_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "salida_necesidad_administrativa"
if(salida_necesidad_administrativa != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//salida_necesidad_administrativa
			//salida_necesidad_administrativa


			
				if(execStat){
					runStat.updateStatOnConnection("salida_necesidad_administrativa"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    if(salida_necesidad_administrativa.id == null) {
pstmt_tPostgresqlOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tPostgresqlOutput_1.setInt(1, salida_necesidad_administrativa.id);
}

                    pstmt_tPostgresqlOutput_1.setInt(2, salida_necesidad_administrativa.numero);

                    pstmt_tPostgresqlOutput_1.setInt(3, salida_necesidad_administrativa.vigencia);

                    if(salida_necesidad_administrativa.objeto == null) {
pstmt_tPostgresqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(4, salida_necesidad_administrativa.objeto);
}

                    if(salida_necesidad_administrativa.fecha_solicitud != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(5, new java.sql.Timestamp(salida_necesidad_administrativa.fecha_solicitud.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(5, java.sql.Types.TIMESTAMP);
}

                    pstmt_tPostgresqlOutput_1.setDouble(6, salida_necesidad_administrativa.valor);

                    if(salida_necesidad_administrativa.justificacion == null) {
pstmt_tPostgresqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(7, salida_necesidad_administrativa.justificacion);
}

                    pstmt_tPostgresqlOutput_1.setInt(8, salida_necesidad_administrativa.unidad_ejecutora);

                    pstmt_tPostgresqlOutput_1.setInt(9, salida_necesidad_administrativa.modalidad_seleccion);

                    pstmt_tPostgresqlOutput_1.setInt(10, salida_necesidad_administrativa.tipo_contrato_necesidad);

                    pstmt_tPostgresqlOutput_1.setInt(11, salida_necesidad_administrativa.plan_anual_adquisiciones);

                    pstmt_tPostgresqlOutput_1.setInt(12, salida_necesidad_administrativa.tipo_financiacion_necesidad);

                    pstmt_tPostgresqlOutput_1.setInt(13, salida_necesidad_administrativa.numero_elaboracion);

                    if(salida_necesidad_administrativa.fecha_modificacion != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(14, new java.sql.Timestamp(salida_necesidad_administrativa.fecha_modificacion.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(14, java.sql.Types.TIMESTAMP);
}

                    pstmt_tPostgresqlOutput_1.setInt(15, salida_necesidad_administrativa.estado_necesidad);

                    pstmt_tPostgresqlOutput_1.setInt(16, salida_necesidad_administrativa.supervisor);

                    pstmt_tPostgresqlOutput_1.setInt(17, salida_necesidad_administrativa.tipo_necesidad);

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
				    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
				    	String errormessage_tPostgresqlOutput_1;
						if (ne_tPostgresqlOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
							errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
						}else{
							errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
			    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
			    	String errormessage_tPostgresqlOutput_1;
					if (ne_tPostgresqlOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
						errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
					}else{
						errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
					}
			    	
			    	int countSum_tPostgresqlOutput_1 = 0;
					for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
					
			    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
			    	
			    	System.err.println(errormessage_tPostgresqlOutput_1);
			    	
				}
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

 



/**
 * [tPostgresqlOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

 



/**
 * [tPostgresqlOutput_1 process_data_end ] stop
 */

} // End of branch "salida_necesidad_administrativa"




// Start of branch "salida_disponibilidadFi"
if(salida_disponibilidadFi != null) { 



	
	/**
	 * [tPostgresqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

			//salida_disponibilidadFi
			//salida_disponibilidadFi


			
				if(execStat){
					runStat.updateStatOnConnection("salida_disponibilidadFi"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_2 = false;
                    pstmt_tPostgresqlOutput_2.setInt(1, salida_disponibilidadFi.id);

                    pstmt_tPostgresqlOutput_2.setInt(2, salida_disponibilidadFi.vigencia);

                    pstmt_tPostgresqlOutput_2.setInt(3, salida_disponibilidadFi.numero_disponibilidad);

                    pstmt_tPostgresqlOutput_2.setInt(4, salida_disponibilidadFi.responsable);

                    if(salida_disponibilidadFi.fecha_registro != null) {
pstmt_tPostgresqlOutput_2.setTimestamp(5, new java.sql.Timestamp(salida_disponibilidadFi.fecha_registro.getTime()));
} else {
pstmt_tPostgresqlOutput_2.setNull(5, java.sql.Types.TIMESTAMP);
}

                    pstmt_tPostgresqlOutput_2.setShort(6, salida_disponibilidadFi.estado);

                    pstmt_tPostgresqlOutput_2.setInt(7, salida_disponibilidadFi.solicitud);

			
    		pstmt_tPostgresqlOutput_2.addBatch();
    		nb_line_tPostgresqlOutput_2++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_2++;
    		  
    			if ((batchSize_tPostgresqlOutput_2 > 0) && (batchSize_tPostgresqlOutput_2 <= batchSizeCounter_tPostgresqlOutput_2)) {
                try {
						int countSum_tPostgresqlOutput_2 = 0;
						    
						for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
				    	
				    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_2){
				    	java.sql.SQLException ne_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getNextException(),sqle_tPostgresqlOutput_2=null;
				    	String errormessage_tPostgresqlOutput_2;
						if (ne_tPostgresqlOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_2 = new java.sql.SQLException(e_tPostgresqlOutput_2.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_2.getMessage(), ne_tPostgresqlOutput_2.getSQLState(), ne_tPostgresqlOutput_2.getErrorCode(), ne_tPostgresqlOutput_2);
							errormessage_tPostgresqlOutput_2 = sqle_tPostgresqlOutput_2.getMessage();
						}else{
							errormessage_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_2 = 0;
						for(int countEach_tPostgresqlOutput_2: e_tPostgresqlOutput_2.getUpdateCounts()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
						
				    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tPostgresqlOutput_2++;
                if(commitEvery_tPostgresqlOutput_2 <= commitCounter_tPostgresqlOutput_2) {
                if ((batchSize_tPostgresqlOutput_2 > 0) && (batchSizeCounter_tPostgresqlOutput_2 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_2 = 0;
                		    
						for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
            	    	
                batchSizeCounter_tPostgresqlOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_2){
			    	java.sql.SQLException ne_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getNextException(),sqle_tPostgresqlOutput_2=null;
			    	String errormessage_tPostgresqlOutput_2;
					if (ne_tPostgresqlOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tPostgresqlOutput_2 = new java.sql.SQLException(e_tPostgresqlOutput_2.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_2.getMessage(), ne_tPostgresqlOutput_2.getSQLState(), ne_tPostgresqlOutput_2.getErrorCode(), ne_tPostgresqlOutput_2);
						errormessage_tPostgresqlOutput_2 = sqle_tPostgresqlOutput_2.getMessage();
					}else{
						errormessage_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getMessage();
					}
			    	
			    	int countSum_tPostgresqlOutput_2 = 0;
					for(int countEach_tPostgresqlOutput_2: e_tPostgresqlOutput_2.getUpdateCounts()) {
						countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
					}
					
			    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
			    	
			    	System.err.println(errormessage_tPostgresqlOutput_2);
			    	
				}
            }
                	conn_tPostgresqlOutput_2.commit();
                	
                	commitCounter_tPostgresqlOutput_2=0;
                }

 


	tos_count_tPostgresqlOutput_2++;

/**
 * [tPostgresqlOutput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_end ] stop
 */

} // End of branch "salida_disponibilidadFi"




// Start of branch "salida_disponibilidad_financiera"
if(salida_disponibilidad_financiera != null) { 



	
	/**
	 * [tAdvancedHash_salida_disponibilidad_financiera main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_salida_disponibilidad_financiera";

	

			//salida_disponibilidad_financiera
			//salida_disponibilidad_financiera


			
				if(execStat){
					runStat.updateStatOnConnection("salida_disponibilidad_financiera"+iterateId,1, 1);
				} 
			

		


			   
			   

					salida_disponibilidad_financieraStruct salida_disponibilidad_financiera_HashRow = new salida_disponibilidad_financieraStruct();
		   	   	   
				
				salida_disponibilidad_financiera_HashRow.id = salida_disponibilidad_financiera.id;
				
				salida_disponibilidad_financiera_HashRow.vigencia = salida_disponibilidad_financiera.vigencia;
				
				salida_disponibilidad_financiera_HashRow.numero_disponibilidad = salida_disponibilidad_financiera.numero_disponibilidad;
				
				salida_disponibilidad_financiera_HashRow.responsable = salida_disponibilidad_financiera.responsable;
				
				salida_disponibilidad_financiera_HashRow.fecha_registro = salida_disponibilidad_financiera.fecha_registro;
				
				salida_disponibilidad_financiera_HashRow.estado = salida_disponibilidad_financiera.estado;
				
				salida_disponibilidad_financiera_HashRow.solicitud = salida_disponibilidad_financiera.solicitud;
				
				salida_disponibilidad_financiera_HashRow.unidad_ejecutora = salida_disponibilidad_financiera.unidad_ejecutora;
				
			tHash_Lookup_salida_disponibilidad_financiera.put(salida_disponibilidad_financiera_HashRow);
			
            




 


	tos_count_tAdvancedHash_salida_disponibilidad_financiera++;

/**
 * [tAdvancedHash_salida_disponibilidad_financiera main ] stop
 */
	
	/**
	 * [tAdvancedHash_salida_disponibilidad_financiera process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_salida_disponibilidad_financiera";

	

 



/**
 * [tAdvancedHash_salida_disponibilidad_financiera process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_salida_disponibilidad_financiera process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_salida_disponibilidad_financiera";

	

 



/**
 * [tAdvancedHash_salida_disponibilidad_financiera process_data_end ] stop
 */

} // End of branch "salida_disponibilidad_financiera"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "salida_necesidad"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tConvertType_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";

	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";

	

}
}finally{
stmt_tOracleInput_1.close();

	if(conn_tOracleInput_1 != null && !conn_tOracleInput_1.isClosed()) {
	
			conn_tOracleInput_1.close();
			
	}
	
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tConvertType_1 end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	
      globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tConvertType_1", true);
end_Hash.put("tConvertType_1", System.currentTimeMillis());




/**
 * [tConvertType_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("salida_necesidad"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
	    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
	    	String errormessage_tPostgresqlOutput_1;
			if (ne_tPostgresqlOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
				errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
			}else{
				errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_1);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
        		
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("salida_necesidad_administrativa"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */




	
	/**
	 * [tPostgresqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



	    try {
				int countSum_tPostgresqlOutput_2 = 0;
				if (pstmt_tPostgresqlOutput_2 != null && batchSizeCounter_tPostgresqlOutput_2 > 0) {
						
					for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
						countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_2){
	    	java.sql.SQLException ne_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getNextException(),sqle_tPostgresqlOutput_2=null;
	    	String errormessage_tPostgresqlOutput_2;
			if (ne_tPostgresqlOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_2 = new java.sql.SQLException(e_tPostgresqlOutput_2.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_2.getMessage(), ne_tPostgresqlOutput_2.getSQLState(), ne_tPostgresqlOutput_2.getErrorCode(), ne_tPostgresqlOutput_2);
				errormessage_tPostgresqlOutput_2 = sqle_tPostgresqlOutput_2.getMessage();
			}else{
				errormessage_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_2 = 0;
			for(int countEach_tPostgresqlOutput_2: e_tPostgresqlOutput_2.getUpdateCounts()) {
				countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
			}
			
	    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_2);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_2 != null) {
        		
            pstmt_tPostgresqlOutput_2.close();
        }

			
			conn_tPostgresqlOutput_2.commit();
			
		
    	conn_tPostgresqlOutput_2 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_2", true);
    	

	nb_line_deleted_tPostgresqlOutput_2=nb_line_deleted_tPostgresqlOutput_2+ deletedCount_tPostgresqlOutput_2;
	nb_line_update_tPostgresqlOutput_2=nb_line_update_tPostgresqlOutput_2 + updatedCount_tPostgresqlOutput_2;
	nb_line_inserted_tPostgresqlOutput_2=nb_line_inserted_tPostgresqlOutput_2 + insertedCount_tPostgresqlOutput_2;
	nb_line_rejected_tPostgresqlOutput_2=nb_line_rejected_tPostgresqlOutput_2 + rejectedCount_tPostgresqlOutput_2;
	
        globalMap.put("tPostgresqlOutput_2_NB_LINE",nb_line_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("salida_disponibilidadFi"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_2", true);
end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_2 end ] stop
 */




	
	/**
	 * [tAdvancedHash_salida_disponibilidad_financiera end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_salida_disponibilidad_financiera";

	

tHash_Lookup_salida_disponibilidad_financiera.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("salida_disponibilidad_financiera"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_salida_disponibilidad_financiera", true);
end_Hash.put("tAdvancedHash_salida_disponibilidad_financiera", System.currentTimeMillis());




/**
 * [tAdvancedHash_salida_disponibilidad_financiera end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";

	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tConvertType_1 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tPostgresqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1");
					
					
            		
					ctn_tPostgresqlOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */




	
	/**
	 * [tPostgresqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_2")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_2")!=null){
				try {
					
					
					java.sql.Connection ctn_tPostgresqlOutput_2 = (java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_2");
					
					
            		
					ctn_tPostgresqlOutput_2.close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_2) {
					String errorMessage_tPostgresqlOutput_2 = "failed to close the connection in tPostgresqlOutput_2 :" + sqlEx_tPostgresqlOutput_2.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_2);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_2 finally ] stop
 */




	
	/**
	 * [tAdvancedHash_salida_disponibilidad_financiera finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_salida_disponibilidad_financiera";

	

 



/**
 * [tAdvancedHash_salida_disponibilidad_financiera finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer MAX_TAB1_INTERNO_RUBRO_;

				public Integer getMAX_TAB1_INTERNO_RUBRO_ () {
					return this.MAX_TAB1_INTERNO_RUBRO_;
				}
				
			    public BigDecimal MAX_TAB1_;

				public BigDecimal getMAX_TAB1_ () {
					return this.MAX_TAB1_;
				}
				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}
				
			    public BigDecimal MAX_TAB1_1;

				public BigDecimal getMAX_TAB1_1 () {
					return this.MAX_TAB1_1;
				}
				
			    public String MAX_TAB1_2;

				public String getMAX_TAB1_2 () {
					return this.MAX_TAB1_2;
				}
				
			    public BigDecimal MAX_TAB1_3;

				public BigDecimal getMAX_TAB1_3 () {
					return this.MAX_TAB1_3;
				}
				
			    public String MAX_TAB1_4;

				public String getMAX_TAB1_4 () {
					return this.MAX_TAB1_4;
				}
				
			    public BigDecimal MAX_TAB1_5;

				public BigDecimal getMAX_TAB1_5 () {
					return this.MAX_TAB1_5;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.MAX_TAB1_INTERNO_RUBRO_ == null) ? 0 : this.MAX_TAB1_INTERNO_RUBRO_.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.MAX_TAB1_INTERNO_RUBRO_ == null) {
							if (other.MAX_TAB1_INTERNO_RUBRO_ != null)
								return false;
						
						} else if (!this.MAX_TAB1_INTERNO_RUBRO_.equals(other.MAX_TAB1_INTERNO_RUBRO_))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.MAX_TAB1_INTERNO_RUBRO_ = this.MAX_TAB1_INTERNO_RUBRO_;
	            other.MAX_TAB1_ = this.MAX_TAB1_;
	            other.codigo = this.codigo;
	            other.MAX_TAB1_1 = this.MAX_TAB1_1;
	            other.MAX_TAB1_2 = this.MAX_TAB1_2;
	            other.MAX_TAB1_3 = this.MAX_TAB1_3;
	            other.MAX_TAB1_4 = this.MAX_TAB1_4;
	            other.MAX_TAB1_5 = this.MAX_TAB1_5;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.MAX_TAB1_INTERNO_RUBRO_ = this.MAX_TAB1_INTERNO_RUBRO_;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
						this.MAX_TAB1_INTERNO_RUBRO_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.MAX_TAB1_INTERNO_RUBRO_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.MAX_TAB1_ = (BigDecimal) ois.readObject();
					
						this.codigo = readString(dis,ois);
					
       			    	this.MAX_TAB1_1 = (BigDecimal) ois.readObject();
					
						this.MAX_TAB1_2 = readString(dis,ois);
					
       			    	this.MAX_TAB1_3 = (BigDecimal) ois.readObject();
					
						this.MAX_TAB1_4 = readString(dis,ois);
					
       			    	this.MAX_TAB1_5 = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.MAX_TAB1_);
					
						writeString(this.codigo, dos, oos);
					
       			    	oos.writeObject(this.MAX_TAB1_1);
					
						writeString(this.MAX_TAB1_2, dos, oos);
					
       			    	oos.writeObject(this.MAX_TAB1_3);
					
						writeString(this.MAX_TAB1_4, dos, oos);
					
       			    	oos.writeObject(this.MAX_TAB1_5);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MAX_TAB1_INTERNO_RUBRO_="+String.valueOf(MAX_TAB1_INTERNO_RUBRO_));
		sb.append(",MAX_TAB1_="+String.valueOf(MAX_TAB1_));
		sb.append(",codigo="+codigo);
		sb.append(",MAX_TAB1_1="+String.valueOf(MAX_TAB1_1));
		sb.append(",MAX_TAB1_2="+MAX_TAB1_2);
		sb.append(",MAX_TAB1_3="+String.valueOf(MAX_TAB1_3));
		sb.append(",MAX_TAB1_4="+MAX_TAB1_4);
		sb.append(",MAX_TAB1_5="+String.valueOf(MAX_TAB1_5));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.MAX_TAB1_INTERNO_RUBRO_, other.MAX_TAB1_INTERNO_RUBRO_);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];

	
			    public BigDecimal MAX_TAB1_INTERNO_RUBRO_;

				public BigDecimal getMAX_TAB1_INTERNO_RUBRO_ () {
					return this.MAX_TAB1_INTERNO_RUBRO_;
				}
				
			    public BigDecimal MAX_TAB1_;

				public BigDecimal getMAX_TAB1_ () {
					return this.MAX_TAB1_;
				}
				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}
				
			    public BigDecimal MAX_TAB1_1;

				public BigDecimal getMAX_TAB1_1 () {
					return this.MAX_TAB1_1;
				}
				
			    public String MAX_TAB1_2;

				public String getMAX_TAB1_2 () {
					return this.MAX_TAB1_2;
				}
				
			    public BigDecimal MAX_TAB1_3;

				public BigDecimal getMAX_TAB1_3 () {
					return this.MAX_TAB1_3;
				}
				
			    public String MAX_TAB1_4;

				public String getMAX_TAB1_4 () {
					return this.MAX_TAB1_4;
				}
				
			    public BigDecimal MAX_TAB1_5;

				public BigDecimal getMAX_TAB1_5 () {
					return this.MAX_TAB1_5;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_volcado_cdp.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_volcado_cdp.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
						this.MAX_TAB1_INTERNO_RUBRO_ = (BigDecimal) dis.readObject();
					
						this.MAX_TAB1_ = (BigDecimal) dis.readObject();
					
					this.codigo = readString(dis);
					
						this.MAX_TAB1_1 = (BigDecimal) dis.readObject();
					
					this.MAX_TAB1_2 = readString(dis);
					
						this.MAX_TAB1_3 = (BigDecimal) dis.readObject();
					
					this.MAX_TAB1_4 = readString(dis);
					
						this.MAX_TAB1_5 = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.MAX_TAB1_INTERNO_RUBRO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MAX_TAB1_);
					
					// String
				
						writeString(this.codigo,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MAX_TAB1_1);
					
					// String
				
						writeString(this.MAX_TAB1_2,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MAX_TAB1_3);
					
					// String
				
						writeString(this.MAX_TAB1_4,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MAX_TAB1_5);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MAX_TAB1_INTERNO_RUBRO_="+String.valueOf(MAX_TAB1_INTERNO_RUBRO_));
		sb.append(",MAX_TAB1_="+String.valueOf(MAX_TAB1_));
		sb.append(",codigo="+codigo);
		sb.append(",MAX_TAB1_1="+String.valueOf(MAX_TAB1_1));
		sb.append(",MAX_TAB1_2="+MAX_TAB1_2);
		sb.append(",MAX_TAB1_3="+String.valueOf(MAX_TAB1_3));
		sb.append(",MAX_TAB1_4="+MAX_TAB1_4);
		sb.append(",MAX_TAB1_5="+String.valueOf(MAX_TAB1_5));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();





	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row6 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row6().limitLog4jByte();

			   		// connection name:row6
			   		// source node:tConvertType_3 - inputs:(row5) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_3 - inputs:(row3,salida_disponibilidad_financiera,row6,row7,row8) outputs:(salida_disponibilidad_apropiacion)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tConvertType_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_3", false);
		start_Hash.put("tConvertType_3", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tConvertType_3 = 0;
		
    	class BytesLimit65535_tConvertType_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tConvertType_3().limitLog4jByte();
	int nb_line_tConvertType_3 = 0;  
 



/**
 * [tConvertType_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";

	
		int tos_count_tOracleInput_3 = 0;
		
    	class BytesLimit65535_tOracleInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tOracleInput_3().limitLog4jByte();
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				String driverClass_tOracleInput_3 = "oracle.jdbc.driver.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_3);
				
			String url_tOracleInput_3 = null;
				url_tOracleInput_3 = "jdbc:oracle:thin:@" + "10.20.0.7" + ":" + "1521" + ":" + "UD";

				String dbUser_tOracleInput_3 = "SICGEFAD";

				

				 
	final String decryptedPassword_tOracleInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("cd471b85ddbdbd5b7eb697d135b1c956f4f7aba1746784ea");

				String dbPwd_tOracleInput_3 = decryptedPassword_tOracleInput_3;

				
					conn_tOracleInput_3 = java.sql.DriverManager.getConnection(url_tOracleInput_3,dbUser_tOracleInput_3,dbPwd_tOracleInput_3);
				java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_3.next()) {
					sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
				}
                                if (!(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                                }
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT MAX(TAB1.INTERNO_RUBRO), MAX(TAB1.\"entidad\"), TAB1.\"codigo\", MAX(TAB1.\"vigencia\"), MAX(TAB1.\"descripcion"
+"\") \n, MAX(TAB1.\"tipo_plan\"), MAX(TAB1.\"administracion\"), MAX(TAB1.\"estado\") FROM \n(SELECT\nINTERNO_RUBRO,\n1 \"enti"
+"dad\",\nCODIGO_NIVEL1||'-'||CODIGO_NIVEL2||'-'||CODIGO_NIVEL3||'-'||CODIGO_NIVEL4||'-'||CODIGO_NIVEL5||'-'|\n |CODIGO_NIVE"
+"L6||'-'||CODIGO_NIVEL7||'-'||CODIGO_NIVEL8 AS \"codigo\",\nVIGENCIA AS \"vigencia\",\nDESCRIPCION AS \"descripcion\",\n1 \""
+"tipo_plan\",\n'1' \"administracion\",\n1 \"estado\"\nFROM PR.PR_V_RUBROS) TAB1\nGROUP BY TAB1.\"codigo\"\n\nUNION\n\nSELECT 0 AS"
+" \"INTERNO_RUBRO\", 1 AS \"entidad\", \"codigo\", 1 AS \"vigencia\", \"descripcion\", 1 AS \"tipo_plan\", '1' AS \"admin"
+"istracion\", 1 AS \"estado\" FROM \n(SELECT\npr_nivel1.codigo || '-' ||\npr_nivel2.codigo || '-' ||\npr_nivel3.codigo || '-'"
+" ||\npr_nivel4.codigo || '-' ||\npr_nivel5.codigo || '-' ||\npr_nivel6.codigo || '-' ||\npr_nivel7.codigo as \"codigo\",\nMAX"
+"(pr_nivel7.DESCRIPCION) AS \"descripcion\"\nFROM\npr_nivel7,\npr_nivel6,\npr_nivel5,\npr_nivel4,\npr_nivel3,\npr_nivel2,\npr_niv"
+"el1\nWHERE\npr_nivel7.vigencia = pr_nivel6.vigencia AND\npr_nivel7.interno_nivel6 = pr_nivel6.INTERNO AND\npr_nivel7.tipo_pl"
+"an = pr_nivel6.tipo_plan AND\npr_nivel6.vigencia = pr_nivel5.vigencia AND\npr_nivel6.interno_nivel5 = pr_nivel5.INTERNO AN"
+"D\npr_nivel6.tipo_plan = pr_nivel5.tipo_plan AND\npr_nivel5.vigencia = pr_nivel4.vigencia AND\npr_nivel5.interno_nivel4 = p"
+"r_nivel4.INTERNO AND\npr_nivel5.tipo_plan = pr_nivel4.tipo_plan AND\npr_nivel4.vigencia = pr_nivel3.vigencia AND\npr_nivel4"
+".interno_nivel3 = pr_nivel3.INTERNO AND\npr_nivel4.tipo_plan = pr_nivel3.tipo_plan AND\npr_nivel3.vigencia = pr_nivel2.vig"
+"encia AND\npr_nivel3.interno_nivel2 = pr_nivel2.INTERNO AND\npr_nivel3.tipo_plan = pr_nivel2.tipo_plan AND\npr_nivel2.vigen"
+"cia = pr_nivel1.vigencia AND\npr_nivel2.interno_nivel1 = pr_nivel1.INTERNO AND\npr_nivel2.tipo_plan = pr_nivel1.tipo_plan\n"
+"GROUP BY pr_nivel1.codigo || '-' || pr_nivel2.codigo || '-' || pr_nivel3.codigo || '-' || pr_nivel4.codigo || '-' || pr_"
+"nivel5.codigo || '-' || pr_nivel6.codigo || '-' || pr_nivel7.codigo\n\nUNION\n\nSELECT\npr_nivel1.codigo || '-' ||\npr_nivel2."
+"codigo || '-' ||\npr_nivel3.codigo || '-' ||\npr_nivel4.codigo || '-' ||\npr_nivel5.codigo || '-' ||\npr_nivel6.codigo as \""
+"codigo\",\nMAX(pr_nivel6.DESCRIPCION) AS \"descripcion\"\nFROM\npr_nivel6,\npr_nivel5,\npr_nivel4,\npr_nivel3,\npr_nivel2,\npr_n"
+"ivel1\nWHERE\npr_nivel6.vigencia = pr_nivel5.vigencia AND\npr_nivel6.interno_nivel5 = pr_nivel5.INTERNO AND\npr_nivel6.tipo_"
+"plan = pr_nivel5.tipo_plan AND\npr_nivel5.vigencia = pr_nivel4.vigencia AND\npr_nivel5.interno_nivel4 = pr_nivel4.INTERNO "
+"AND\npr_nivel5.tipo_plan = pr_nivel4.tipo_plan AND\npr_nivel4.vigencia = pr_nivel3.vigencia AND\npr_nivel4.interno_nivel3 ="
+" pr_nivel3.INTERNO AND\npr_nivel4.tipo_plan = pr_nivel3.tipo_plan AND\npr_nivel3.vigencia = pr_nivel2.vigencia AND\npr_nive"
+"l3.interno_nivel2 = pr_nivel2.INTERNO AND\npr_nivel3.tipo_plan = pr_nivel2.tipo_plan AND\npr_nivel2.vigencia = pr_nivel1.v"
+"igencia AND\npr_nivel2.interno_nivel1 = pr_nivel1.INTERNO AND\npr_nivel2.tipo_plan = pr_nivel1.tipo_plan\nGROUP BY pr_nivel"
+"1.codigo || '-' || pr_nivel2.codigo || '-' || pr_nivel3.codigo || '-' || pr_nivel4.codigo || '-' || pr_nivel5.codigo || "
+"'-' || pr_nivel6.codigo\n\nUNION\n\nSELECT\npr_nivel1.codigo || '-' ||\npr_nivel2.codigo || '-' ||\npr_nivel3.codigo || '-' ||\n"
+"pr_nivel4.codigo || '-' ||\npr_nivel5.codigo as \"codigo\",\nMAX(pr_nivel5.DESCRIPCION) AS \"descripcion\"\nFROM\npr_nivel5,"
+"\npr_nivel4,\npr_nivel3,\npr_nivel2,\npr_nivel1\nWHERE\npr_nivel5.vigencia = pr_nivel4.vigencia AND\npr_nivel5.interno_nivel4 ="
+" pr_nivel4.INTERNO AND\npr_nivel5.tipo_plan = pr_nivel4.tipo_plan AND\npr_nivel4.vigencia = pr_nivel3.vigencia AND\npr_nive"
+"l4.interno_nivel3 = pr_nivel3.INTERNO AND\npr_nivel4.tipo_plan = pr_nivel3.tipo_plan AND\npr_nivel3.vigencia = pr_nivel2.v"
+"igencia AND\npr_nivel3.interno_nivel2 = pr_nivel2.INTERNO AND\npr_nivel3.tipo_plan = pr_nivel2.tipo_plan AND\npr_nivel2.vig"
+"encia = pr_nivel1.vigencia AND\npr_nivel2.interno_nivel1 = pr_nivel1.INTERNO AND\npr_nivel2.tipo_plan = pr_nivel1.tipo_pla"
+"n\nGROUP BY pr_nivel1.codigo || '-' || pr_nivel2.codigo || '-' || pr_nivel3.codigo || '-' || pr_nivel4.codigo || '-' || p"
+"r_nivel5.codigo\n\nUNION\n\nSELECT\npr_nivel1.codigo || '-' ||\npr_nivel2.codigo || '-' ||\npr_nivel3.codigo || '-' ||\npr_nivel"
+"4.codigo as \"codigo\",\nMAX(pr_nivel4.DESCRIPCION) AS \"descripcion\"\nFROM\npr_nivel4,\npr_nivel3,\npr_nivel2,\npr_nivel1\nWH"
+"ERE\npr_nivel4.vigencia = pr_nivel3.vigencia AND\npr_nivel4.interno_nivel3 = pr_nivel3.INTERNO AND\npr_nivel4.tipo_plan = p"
+"r_nivel3.tipo_plan AND\npr_nivel3.vigencia = pr_nivel2.vigencia AND\npr_nivel3.interno_nivel2 = pr_nivel2.INTERNO AND\npr_n"
+"ivel3.tipo_plan = pr_nivel2.tipo_plan AND\npr_nivel2.vigencia = pr_nivel1.vigencia AND\npr_nivel2.interno_nivel1 = pr_nive"
+"l1.INTERNO AND\npr_nivel2.tipo_plan = pr_nivel1.tipo_plan\nGROUP BY pr_nivel1.codigo || '-' || pr_nivel2.codigo || '-' || "
+"pr_nivel3.codigo || '-' || pr_nivel4.codigo\n\nUNION\n\nSELECT\npr_nivel1.codigo || '-' ||\npr_nivel2.codigo || '-' ||\npr_nive"
+"l3.codigo as \"codigo\",\nMAX(pr_nivel3.DESCRIPCION) AS \"descripcion\"\nFROM\npr_nivel3,\npr_nivel2,\npr_nivel1\nWHERE\npr_niv"
+"el3.vigencia = pr_nivel2.vigencia AND\npr_nivel3.interno_nivel2 = pr_nivel2.INTERNO AND\npr_nivel3.tipo_plan = pr_nivel2.t"
+"ipo_plan AND\npr_nivel2.vigencia = pr_nivel1.vigencia AND\npr_nivel2.interno_nivel1 = pr_nivel1.INTERNO AND\npr_nivel2.tipo"
+"_plan = pr_nivel1.tipo_plan\nGROUP BY pr_nivel1.codigo || '-' || pr_nivel2.codigo || '-' || pr_nivel3.codigo\n\nUNION\n\nSELE"
+"CT\npr_nivel1.codigo || '-' ||\npr_nivel2.codigo as \"codigo\",\nMAX(pr_nivel2.DESCRIPCION) AS \"descripcion\"\nFROM\npr_nive"
+"l2,\npr_nivel1\nWHERE\npr_nivel2.vigencia = pr_nivel1.vigencia AND\npr_nivel2.interno_nivel1 = pr_nivel1.INTERNO AND\npr_nive"
+"l2.tipo_plan = pr_nivel1.tipo_plan\nGROUP BY pr_nivel1.codigo || '-' || pr_nivel2.codigo\n\nUNION\n\nSELECT\npr_nivel1.codigo "
+"as \"codigo\",\nMAX(pr_nivel1.DESCRIPCION) AS \"descripcion\"\nFROM\npr_nivel1\nGROUP BY pr_nivel1.codigo)TEMP";
			

            	globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);
		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row5.MAX_TAB1_INTERNO_RUBRO_ = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row5.MAX_TAB1_INTERNO_RUBRO_ = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
						row5.MAX_TAB1_INTERNO_RUBRO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row5.MAX_TAB1_ = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(2) != null) {
						row5.MAX_TAB1_ = rs_tOracleInput_3.getBigDecimal(2);
					} else {
				
						row5.MAX_TAB1_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row5.codigo = null;
							} else {
	                         		
        	row5.codigo = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 4) {
								row5.MAX_TAB1_1 = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(4) != null) {
						row5.MAX_TAB1_1 = rs_tOracleInput_3.getBigDecimal(4);
					} else {
				
						row5.MAX_TAB1_1 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 5) {
								row5.MAX_TAB1_2 = null;
							} else {
	                         		
        	row5.MAX_TAB1_2 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 6) {
								row5.MAX_TAB1_3 = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(6) != null) {
						row5.MAX_TAB1_3 = rs_tOracleInput_3.getBigDecimal(6);
					} else {
				
						row5.MAX_TAB1_3 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 7) {
								row5.MAX_TAB1_4 = null;
							} else {
	                         		
        	row5.MAX_TAB1_4 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 8) {
								row5.MAX_TAB1_5 = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(8) != null) {
						row5.MAX_TAB1_5 = rs_tOracleInput_3.getBigDecimal(8);
					} else {
				
						row5.MAX_TAB1_5 = null;
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";

	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";

	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_3 main ] start
	 */

	

	
	
	currentComponent="tConvertType_3";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		


  row6 = new row6Struct();
  boolean bHasError_tConvertType_3 = false;             
          try {
              row6.MAX_TAB1_INTERNO_RUBRO_=TypeConvert.BigDecimal2Integer(row5.MAX_TAB1_INTERNO_RUBRO_);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.MAX_TAB1_=TypeConvert.BigDecimal2BigDecimal(row5.MAX_TAB1_);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.codigo=TypeConvert.String2String(row5.codigo);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.MAX_TAB1_1=TypeConvert.BigDecimal2BigDecimal(row5.MAX_TAB1_1);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.MAX_TAB1_2=TypeConvert.String2String(row5.MAX_TAB1_2);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.MAX_TAB1_3=TypeConvert.BigDecimal2BigDecimal(row5.MAX_TAB1_3);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.MAX_TAB1_4=TypeConvert.String2String(row5.MAX_TAB1_4);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.MAX_TAB1_5=TypeConvert.BigDecimal2BigDecimal(row5.MAX_TAB1_5);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_3) {row6 = null;}

  nb_line_tConvertType_3 ++ ;
 


	tos_count_tConvertType_3++;

/**
 * [tConvertType_3 main ] stop
 */
	
	/**
	 * [tConvertType_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_3";

	

 



/**
 * [tConvertType_3 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.MAX_TAB1_INTERNO_RUBRO_ = row6.MAX_TAB1_INTERNO_RUBRO_;
				
				row6_HashRow.MAX_TAB1_ = row6.MAX_TAB1_;
				
				row6_HashRow.codigo = row6.codigo;
				
				row6_HashRow.MAX_TAB1_1 = row6.MAX_TAB1_1;
				
				row6_HashRow.MAX_TAB1_2 = row6.MAX_TAB1_2;
				
				row6_HashRow.MAX_TAB1_3 = row6.MAX_TAB1_3;
				
				row6_HashRow.MAX_TAB1_4 = row6.MAX_TAB1_4;
				
				row6_HashRow.MAX_TAB1_5 = row6.MAX_TAB1_5;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tConvertType_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_3";

	

 



/**
 * [tConvertType_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";

	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";

	

}
}finally{
stmt_tOracleInput_3.close();

	if(conn_tOracleInput_3 != null && !conn_tOracleInput_3.isClosed()) {
	
			conn_tOracleInput_3.close();
			
	}
	
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tConvertType_3 end ] start
	 */

	

	
	
	currentComponent="tConvertType_3";

	
      globalMap.put("tConvertType_3_NB_LINE", nb_line_tConvertType_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tConvertType_3", true);
end_Hash.put("tConvertType_3", System.currentTimeMillis());




/**
 * [tConvertType_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";

	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tConvertType_3 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_3";

	

 



/**
 * [tConvertType_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public short entidad;

				public short getEntidad () {
					return this.entidad;
				}
				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public Short unidad_ejecutora;

				public Short getUnidad_ejecutora () {
					return this.unidad_ejecutora;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.codigo == null) ? 0 : this.codigo.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.codigo == null) {
							if (other.codigo != null)
								return false;
						
						} else if (!this.codigo.equals(other.codigo))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.id = this.id;
	            other.entidad = this.entidad;
	            other.codigo = this.codigo;
	            other.nombre = this.nombre;
	            other.unidad_ejecutora = this.unidad_ejecutora;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.codigo = this.codigo;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FINANCIERA_MIGR_volcado_cdp.length) {
				if(length < 1024 && commonByteArray_FINANCIERA_MIGR_volcado_cdp.length == 0) {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[1024];
				} else {
   					commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length);
			strReturn = new String(commonByteArray_FINANCIERA_MIGR_volcado_cdp, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
					this.codigo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codigo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
			            this.entidad = dis.readShort();
					
						this.nombre = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unidad_ejecutora = null;
           				} else {
           			    	this.unidad_ejecutora = dis.readShort();
           				}
					
						this.descripcion = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
		            	dos.writeShort(this.entidad);
					
						writeString(this.nombre, dos, oos);
					
						if(this.unidad_ejecutora == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.unidad_ejecutora);
		            	}
					
						writeString(this.descripcion, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",entidad="+String.valueOf(entidad));
		sb.append(",codigo="+codigo);
		sb.append(",nombre="+nombre);
		sb.append(",unidad_ejecutora="+String.valueOf(unidad_ejecutora));
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.codigo, other.codigo);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row7 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row7().limitLog4jByte();

			   		// connection name:row7
			   		// source node:tPostgresqlInput_3 - inputs:(after_tOracleInput_2) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_3 - inputs:(row3,salida_disponibilidad_financiera,row6,row7,row8) outputs:(salida_disponibilidad_apropiacion)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_3);
			   	String dbUser_tPostgresqlInput_3 = "test";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("f3e656537b1a4d67");
			   	
		        String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;
		        
				
			String url_tPostgresqlInput_3 = "jdbc:postgresql://" + "172.20.0.2" + ":" + "5432" + "/" + "test";
				
				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_3,dbUser_tPostgresqlInput_3,dbPwd_tPostgresqlInput_3);
		        
				conn_tPostgresqlInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "SELECT * FROM financiera.rubro";
			

            	globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);
		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;

		    try {
		    	rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								row7.id = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(1) != null) {
                row7.id = rs_tPostgresqlInput_3.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								row7.entidad = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(2) != null) {
                row7.entidad = rs_tPostgresqlInput_3.getShort(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 3) {
								row7.codigo = null;
							} else {
	                         		
        	row7.codigo = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 3, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 4) {
								row7.nombre = null;
							} else {
	                         		
        	row7.nombre = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 4, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 5) {
								row7.unidad_ejecutora = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(5) != null) {
                row7.unidad_ejecutora = rs_tPostgresqlInput_3.getShort(5);
            } else {
                    row7.unidad_ejecutora = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 6) {
								row7.descripcion = null;
							} else {
	                         		
        	row7.descripcion = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 6, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.id = row7.id;
				
				row7_HashRow.entidad = row7.entidad;
				
				row7_HashRow.codigo = row7.codigo;
				
				row7_HashRow.nombre = row7.nombre;
				
				row7_HashRow.unidad_ejecutora = row7.unidad_ejecutora;
				
				row7_HashRow.descripcion = row7.descripcion;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	stmt_tPostgresqlInput_3.close();

	if(conn_tPostgresqlInput_3 != null && !conn_tPostgresqlInput_3.isClosed()) {
		
			conn_tPostgresqlInput_3.commit();
			
		
			conn_tPostgresqlInput_3.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

tHash_Lookup_row7.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp = new byte[0];
    static byte[] commonByteArray_FINANCIERA_MIGR_volcado_cdp = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public int vigencia;

				public int getVigencia () {
					return this.vigencia;
				}
				
			    public int rubro;

				public int getRubro () {
					return this.rubro;
				}
				
			    public BigDecimal valor;

				public BigDecimal getValor () {
					return this.valor;
				}
				
			    public int estado;

				public int getEstado () {
					return this.estado;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.vigencia;
						
							result = prime * result + (int) this.rubro;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.vigencia != other.vigencia)
							return false;
					
						if (this.rubro != other.rubro)
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.id = this.id;
	            other.vigencia = this.vigencia;
	            other.rubro = this.rubro;
	            other.valor = this.valor;
	            other.estado = this.estado;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.vigencia = this.vigencia;
	            	other.rubro = this.rubro;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FINANCIERA_MIGR_volcado_cdp) {

        	try {

        		int length = 0;
		
			        this.vigencia = dis.readInt();
					
			        this.rubro = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.vigencia);
					
					// int
				
		            	dos.writeInt(this.rubro);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
       			    	this.valor = (BigDecimal) ois.readObject();
					
			            this.estado = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
       			    	oos.writeObject(this.valor);
					
		            	dos.writeInt(this.estado);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",vigencia="+String.valueOf(vigencia));
		sb.append(",rubro="+String.valueOf(rubro));
		sb.append(",valor="+String.valueOf(valor));
		sb.append(",estado="+String.valueOf(estado));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vigencia, other.vigencia);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.rubro, other.rubro);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row8 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row8().limitLog4jByte();

			   		// connection name:row8
			   		// source node:tPostgresqlInput_1 - inputs:(after_tOracleInput_2) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_3 - inputs:(row3,salida_disponibilidad_financiera,row6,row7,row8) outputs:(salida_disponibilidad_apropiacion)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_1);
			   	String dbUser_tPostgresqlInput_1 = "test";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("f3e656537b1a4d67");
			   	
		        String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;
		        
				
			String url_tPostgresqlInput_1 = "jdbc:postgresql://" + "172.20.0.2" + ":" + "5432" + "/" + "test";
				
				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_1,dbUser_tPostgresqlInput_1,dbPwd_tPostgresqlInput_1);
		        
				conn_tPostgresqlInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "SELECT * FROM financiera.apropiacion";
			

            	globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);
		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;

		    try {
		    	rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								row8.id = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(1) != null) {
                row8.id = rs_tPostgresqlInput_1.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								row8.vigencia = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(2) != null) {
                row8.vigencia = rs_tPostgresqlInput_1.getInt(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 3) {
								row8.rubro = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(3) != null) {
                row8.rubro = rs_tPostgresqlInput_1.getInt(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 4) {
								row8.valor = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(4) != null) {
                row8.valor = rs_tPostgresqlInput_1.getBigDecimal(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 5) {
								row8.estado = 0;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(5) != null) {
                row8.estado = rs_tPostgresqlInput_1.getInt(5);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.id = row8.id;
				
				row8_HashRow.vigencia = row8.vigencia;
				
				row8_HashRow.rubro = row8.rubro;
				
				row8_HashRow.valor = row8.valor;
				
				row8_HashRow.estado = row8.estado;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

	if(conn_tPostgresqlInput_1 != null && !conn_tPostgresqlInput_1.isClosed()) {
		
			conn_tPostgresqlInput_1.commit();
			
		
			conn_tPostgresqlInput_1.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

tHash_Lookup_row8.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final volcado_cdp volcado_cdpClass = new volcado_cdp();

        int exitCode = volcado_cdpClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = volcado_cdp.class.getClassLoader().getResourceAsStream("financiera_migr/volcado_cdp_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = volcado_cdp.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("disponibilidad", "id_Integer");
				
             try{
                 context.disponibilidad=routines.system.ParserUtils.parseTo_Integer (context.getProperty("disponibilidad"));
             }catch(NumberFormatException e){
                 context.disponibilidad=null;
              }
				    context.setContextType("vigencia", "id_Integer");
				
             try{
                 context.vigencia=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vigencia"));
             }catch(NumberFormatException e){
                 context.vigencia=null;
              }
				    context.setContextType("curr_id", "id_Integer");
				
             try{
                 context.curr_id=routines.system.ParserUtils.parseTo_Integer (context.getProperty("curr_id"));
             }catch(NumberFormatException e){
                 context.curr_id=null;
              }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("disponibilidad")) {
                context.disponibilidad = (Integer) parentContextMap.get("disponibilidad");
            }if (parentContextMap.containsKey("vigencia")) {
                context.vigencia = (Integer) parentContextMap.get("vigencia");
            }if (parentContextMap.containsKey("curr_id")) {
                context.curr_id = (Integer) parentContextMap.get("curr_id");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tOracleInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tOracleInput_2) {
globalMap.put("tOracleInput_2_SUBPROCESS_STATE", -1);

e_tOracleInput_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : volcado_cdp");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     284576 characters generated by Talend Open Studio for Data Integration 
 *     on the 3 de agosto de 2018 08:30:06 PM COT
 ************************************************************************************************/
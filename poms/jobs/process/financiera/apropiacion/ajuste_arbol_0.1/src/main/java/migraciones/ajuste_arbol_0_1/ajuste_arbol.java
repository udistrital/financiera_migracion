// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package migraciones.ajuste_arbol_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: ajuste_arbol Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class ajuste_arbol implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ajuste_arbol";
	private final String projectName = "MIGRACIONES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ajuste_arbol.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ajuste_arbol.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlRow_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_1", false);
				start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlRow_1";

				int tos_count_tPostgresqlRow_1 = 0;

				class BytesLimit65535_tPostgresqlRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostgresqlRow_1().limitLog4jByte();

				java.sql.Connection conn_tPostgresqlRow_1 = null;
				String query_tPostgresqlRow_1 = "";
				boolean whetherReject_tPostgresqlRow_1 = false;
				String driverClass_tPostgresqlRow_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlRow_1);

				String url_tPostgresqlRow_1 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "test";

				String dbUser_tPostgresqlRow_1 = "test";

				final String decryptedPassword_tPostgresqlRow_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("f3e656537b1a4d67");

				String dbPwd_tPostgresqlRow_1 = decryptedPassword_tPostgresqlRow_1;

				conn_tPostgresqlRow_1 = java.sql.DriverManager.getConnection(
						url_tPostgresqlRow_1, dbUser_tPostgresqlRow_1,
						dbPwd_tPostgresqlRow_1);

				if (conn_tPostgresqlRow_1.getAutoCommit()) {

					conn_tPostgresqlRow_1.setAutoCommit(false);

				}
				int commitEvery_tPostgresqlRow_1 = 10000;
				int commitCounter_tPostgresqlRow_1 = 0;

				java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1
						.createStatement();

				/**
				 * [tPostgresqlRow_1 begin ] stop
				 */

				/**
				 * [tPostgresqlRow_1 main ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				query_tPostgresqlRow_1 = "INSERT INTO financiera.rubro_rubro (rubro_padre, rubro_hijo) SELECT r1.id, r2.id FROM\n(SELECT padre, codigo\nFROM\n(SELEC"
						+ "T financiera.rubro.*, (regexp_matches (codigo, '^(([0-9]*){1}(-[0-9]*){1})'))[1] AS padre FROM financiera.rubro WHERE co"
						+ "digo ~ '^([0-9]*){1}(-[0-9]*){2}$' ORDER BY codigo) tabla_1\nORDER BY padre) tabla1,\nfinanciera.rubro r1, financiera.rubr"
						+ "o r2 \nWHERE r1.codigo = tabla1.padre AND r2.codigo = tabla1.codigo;";
				whetherReject_tPostgresqlRow_1 = false;
				globalMap.put("tPostgresqlRow_1_QUERY", query_tPostgresqlRow_1);
				try {
					stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_1 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tPostgresqlRow_1++;
				if (commitEvery_tPostgresqlRow_1 <= commitCounter_tPostgresqlRow_1) {

					conn_tPostgresqlRow_1.commit();

					commitCounter_tPostgresqlRow_1 = 0;
				}

				tos_count_tPostgresqlRow_1++;

				/**
				 * [tPostgresqlRow_1 main ] stop
				 */

				/**
				 * [tPostgresqlRow_1 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				/**
				 * [tPostgresqlRow_1 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlRow_1 process_data_end ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				/**
				 * [tPostgresqlRow_1 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlRow_1 end ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				stmt_tPostgresqlRow_1.close();
				if (commitEvery_tPostgresqlRow_1 > commitCounter_tPostgresqlRow_1) {

					conn_tPostgresqlRow_1.commit();

					commitCounter_tPostgresqlRow_1 = 0;

				}
				conn_tPostgresqlRow_1.close();

				ok_Hash.put("tPostgresqlRow_1", true);
				end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRow_1 finally ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				/**
				 * [tPostgresqlRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_2", false);
				start_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlRow_2";

				int tos_count_tPostgresqlRow_2 = 0;

				class BytesLimit65535_tPostgresqlRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostgresqlRow_2().limitLog4jByte();

				java.sql.Connection conn_tPostgresqlRow_2 = null;
				String query_tPostgresqlRow_2 = "";
				boolean whetherReject_tPostgresqlRow_2 = false;
				String driverClass_tPostgresqlRow_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlRow_2);

				String url_tPostgresqlRow_2 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "test";

				String dbUser_tPostgresqlRow_2 = "test";

				final String decryptedPassword_tPostgresqlRow_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("f3e656537b1a4d67");

				String dbPwd_tPostgresqlRow_2 = decryptedPassword_tPostgresqlRow_2;

				conn_tPostgresqlRow_2 = java.sql.DriverManager.getConnection(
						url_tPostgresqlRow_2, dbUser_tPostgresqlRow_2,
						dbPwd_tPostgresqlRow_2);

				if (conn_tPostgresqlRow_2.getAutoCommit()) {

					conn_tPostgresqlRow_2.setAutoCommit(false);

				}
				int commitEvery_tPostgresqlRow_2 = 10000;
				int commitCounter_tPostgresqlRow_2 = 0;

				java.sql.Statement stmt_tPostgresqlRow_2 = conn_tPostgresqlRow_2
						.createStatement();

				/**
				 * [tPostgresqlRow_2 begin ] stop
				 */

				/**
				 * [tPostgresqlRow_2 main ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				query_tPostgresqlRow_2 = "INSERT INTO financiera.rubro_rubro (rubro_padre, rubro_hijo) SELECT r1.id, r2.id FROM\n(SELECT padre, codigo\nFROM\n(SELEC"
						+ "T financiera.rubro.*, (regexp_matches (codigo, '^(([0-9]*){1}(-[0-9]*){0})'))[1] AS padre FROM financiera.rubro WHERE co"
						+ "digo ~ '^([0-9]*){1}(-[0-9]*){1}$' ORDER BY codigo) tabla_1\nORDER BY padre) tabla1,\nfinanciera.rubro r1, financiera.rubr"
						+ "o r2 \nWHERE r1.codigo = tabla1.padre AND r2.codigo = tabla1.codigo;";
				whetherReject_tPostgresqlRow_2 = false;
				globalMap.put("tPostgresqlRow_2_QUERY", query_tPostgresqlRow_2);
				try {
					stmt_tPostgresqlRow_2.execute(query_tPostgresqlRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_2 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tPostgresqlRow_2++;
				if (commitEvery_tPostgresqlRow_2 <= commitCounter_tPostgresqlRow_2) {

					conn_tPostgresqlRow_2.commit();

					commitCounter_tPostgresqlRow_2 = 0;
				}

				tos_count_tPostgresqlRow_2++;

				/**
				 * [tPostgresqlRow_2 main ] stop
				 */

				/**
				 * [tPostgresqlRow_2 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				/**
				 * [tPostgresqlRow_2 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlRow_2 process_data_end ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				/**
				 * [tPostgresqlRow_2 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlRow_2 end ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				stmt_tPostgresqlRow_2.close();
				if (commitEvery_tPostgresqlRow_2 > commitCounter_tPostgresqlRow_2) {

					conn_tPostgresqlRow_2.commit();

					commitCounter_tPostgresqlRow_2 = 0;

				}
				conn_tPostgresqlRow_2.close();

				ok_Hash.put("tPostgresqlRow_2", true);
				end_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRow_2 finally ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				/**
				 * [tPostgresqlRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_3", false);
				start_Hash.put("tPostgresqlRow_3", System.currentTimeMillis());

				currentComponent = "tPostgresqlRow_3";

				int tos_count_tPostgresqlRow_3 = 0;

				class BytesLimit65535_tPostgresqlRow_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostgresqlRow_3().limitLog4jByte();

				java.sql.Connection conn_tPostgresqlRow_3 = null;
				String query_tPostgresqlRow_3 = "";
				boolean whetherReject_tPostgresqlRow_3 = false;
				String driverClass_tPostgresqlRow_3 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlRow_3);

				String url_tPostgresqlRow_3 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "test";

				String dbUser_tPostgresqlRow_3 = "test";

				final String decryptedPassword_tPostgresqlRow_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("f3e656537b1a4d67");

				String dbPwd_tPostgresqlRow_3 = decryptedPassword_tPostgresqlRow_3;

				conn_tPostgresqlRow_3 = java.sql.DriverManager.getConnection(
						url_tPostgresqlRow_3, dbUser_tPostgresqlRow_3,
						dbPwd_tPostgresqlRow_3);

				if (conn_tPostgresqlRow_3.getAutoCommit()) {

					conn_tPostgresqlRow_3.setAutoCommit(false);

				}
				int commitEvery_tPostgresqlRow_3 = 10000;
				int commitCounter_tPostgresqlRow_3 = 0;

				java.sql.Statement stmt_tPostgresqlRow_3 = conn_tPostgresqlRow_3
						.createStatement();

				/**
				 * [tPostgresqlRow_3 begin ] stop
				 */

				/**
				 * [tPostgresqlRow_3 main ] start
				 */

				currentComponent = "tPostgresqlRow_3";

				query_tPostgresqlRow_3 = "INSERT INTO financiera.rubro_rubro (rubro_padre, rubro_hijo) SELECT r1.id, r2.id FROM\n(SELECT padre, codigo\nFROM\n(SELEC"
						+ "T financiera.rubro.*, (regexp_matches (codigo, '^(([0-9]*){1}(-[0-9]*){2})'))[1] AS padre FROM financiera.rubro WHERE co"
						+ "digo ~ '^([0-9]*){1}(-[0-9]*){3}$' ORDER BY codigo) tabla_1\nORDER BY padre) tabla1,\nfinanciera.rubro r1, financiera.rubr"
						+ "o r2 \nWHERE r1.codigo = tabla1.padre AND r2.codigo = tabla1.codigo;";
				whetherReject_tPostgresqlRow_3 = false;
				globalMap.put("tPostgresqlRow_3_QUERY", query_tPostgresqlRow_3);
				try {
					stmt_tPostgresqlRow_3.execute(query_tPostgresqlRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_3 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tPostgresqlRow_3++;
				if (commitEvery_tPostgresqlRow_3 <= commitCounter_tPostgresqlRow_3) {

					conn_tPostgresqlRow_3.commit();

					commitCounter_tPostgresqlRow_3 = 0;
				}

				tos_count_tPostgresqlRow_3++;

				/**
				 * [tPostgresqlRow_3 main ] stop
				 */

				/**
				 * [tPostgresqlRow_3 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlRow_3";

				/**
				 * [tPostgresqlRow_3 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlRow_3 process_data_end ] start
				 */

				currentComponent = "tPostgresqlRow_3";

				/**
				 * [tPostgresqlRow_3 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlRow_3 end ] start
				 */

				currentComponent = "tPostgresqlRow_3";

				stmt_tPostgresqlRow_3.close();
				if (commitEvery_tPostgresqlRow_3 > commitCounter_tPostgresqlRow_3) {

					conn_tPostgresqlRow_3.commit();

					commitCounter_tPostgresqlRow_3 = 0;

				}
				conn_tPostgresqlRow_3.close();

				ok_Hash.put("tPostgresqlRow_3", true);
				end_Hash.put("tPostgresqlRow_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRow_3 finally ] start
				 */

				currentComponent = "tPostgresqlRow_3";

				/**
				 * [tPostgresqlRow_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRow_3_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_4", false);
				start_Hash.put("tPostgresqlRow_4", System.currentTimeMillis());

				currentComponent = "tPostgresqlRow_4";

				int tos_count_tPostgresqlRow_4 = 0;

				class BytesLimit65535_tPostgresqlRow_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostgresqlRow_4().limitLog4jByte();

				java.sql.Connection conn_tPostgresqlRow_4 = null;
				String query_tPostgresqlRow_4 = "";
				boolean whetherReject_tPostgresqlRow_4 = false;
				String driverClass_tPostgresqlRow_4 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlRow_4);

				String url_tPostgresqlRow_4 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "test";

				String dbUser_tPostgresqlRow_4 = "test";

				final String decryptedPassword_tPostgresqlRow_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("f3e656537b1a4d67");

				String dbPwd_tPostgresqlRow_4 = decryptedPassword_tPostgresqlRow_4;

				conn_tPostgresqlRow_4 = java.sql.DriverManager.getConnection(
						url_tPostgresqlRow_4, dbUser_tPostgresqlRow_4,
						dbPwd_tPostgresqlRow_4);

				if (conn_tPostgresqlRow_4.getAutoCommit()) {

					conn_tPostgresqlRow_4.setAutoCommit(false);

				}
				int commitEvery_tPostgresqlRow_4 = 10000;
				int commitCounter_tPostgresqlRow_4 = 0;

				java.sql.Statement stmt_tPostgresqlRow_4 = conn_tPostgresqlRow_4
						.createStatement();

				/**
				 * [tPostgresqlRow_4 begin ] stop
				 */

				/**
				 * [tPostgresqlRow_4 main ] start
				 */

				currentComponent = "tPostgresqlRow_4";

				query_tPostgresqlRow_4 = "INSERT INTO financiera.rubro_rubro (rubro_padre, rubro_hijo) SELECT r1.id, r2.id FROM\n(SELECT padre, codigo\nFROM\n(SELEC"
						+ "T financiera.rubro.*, (regexp_matches (codigo, '^(([0-9]*){1}(-[0-9]*){3})'))[1] AS padre FROM financiera.rubro WHERE co"
						+ "digo ~ '^([0-9]*){1}(-[0-9]*){4}$' ORDER BY codigo) tabla_1\nORDER BY padre) tabla1,\nfinanciera.rubro r1, financiera.rubr"
						+ "o r2 \nWHERE r1.codigo = tabla1.padre AND r2.codigo = tabla1.codigo;";
				whetherReject_tPostgresqlRow_4 = false;
				globalMap.put("tPostgresqlRow_4_QUERY", query_tPostgresqlRow_4);
				try {
					stmt_tPostgresqlRow_4.execute(query_tPostgresqlRow_4);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_4 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tPostgresqlRow_4++;
				if (commitEvery_tPostgresqlRow_4 <= commitCounter_tPostgresqlRow_4) {

					conn_tPostgresqlRow_4.commit();

					commitCounter_tPostgresqlRow_4 = 0;
				}

				tos_count_tPostgresqlRow_4++;

				/**
				 * [tPostgresqlRow_4 main ] stop
				 */

				/**
				 * [tPostgresqlRow_4 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlRow_4";

				/**
				 * [tPostgresqlRow_4 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlRow_4 process_data_end ] start
				 */

				currentComponent = "tPostgresqlRow_4";

				/**
				 * [tPostgresqlRow_4 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlRow_4 end ] start
				 */

				currentComponent = "tPostgresqlRow_4";

				stmt_tPostgresqlRow_4.close();
				if (commitEvery_tPostgresqlRow_4 > commitCounter_tPostgresqlRow_4) {

					conn_tPostgresqlRow_4.commit();

					commitCounter_tPostgresqlRow_4 = 0;

				}
				conn_tPostgresqlRow_4.close();

				ok_Hash.put("tPostgresqlRow_4", true);
				end_Hash.put("tPostgresqlRow_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRow_4 finally ] start
				 */

				currentComponent = "tPostgresqlRow_4";

				/**
				 * [tPostgresqlRow_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRow_4_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_5", false);
				start_Hash.put("tPostgresqlRow_5", System.currentTimeMillis());

				currentComponent = "tPostgresqlRow_5";

				int tos_count_tPostgresqlRow_5 = 0;

				class BytesLimit65535_tPostgresqlRow_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostgresqlRow_5().limitLog4jByte();

				java.sql.Connection conn_tPostgresqlRow_5 = null;
				String query_tPostgresqlRow_5 = "";
				boolean whetherReject_tPostgresqlRow_5 = false;
				String driverClass_tPostgresqlRow_5 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlRow_5);

				String url_tPostgresqlRow_5 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "test";

				String dbUser_tPostgresqlRow_5 = "test";

				final String decryptedPassword_tPostgresqlRow_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("f3e656537b1a4d67");

				String dbPwd_tPostgresqlRow_5 = decryptedPassword_tPostgresqlRow_5;

				conn_tPostgresqlRow_5 = java.sql.DriverManager.getConnection(
						url_tPostgresqlRow_5, dbUser_tPostgresqlRow_5,
						dbPwd_tPostgresqlRow_5);

				if (conn_tPostgresqlRow_5.getAutoCommit()) {

					conn_tPostgresqlRow_5.setAutoCommit(false);

				}
				int commitEvery_tPostgresqlRow_5 = 10000;
				int commitCounter_tPostgresqlRow_5 = 0;

				java.sql.Statement stmt_tPostgresqlRow_5 = conn_tPostgresqlRow_5
						.createStatement();

				/**
				 * [tPostgresqlRow_5 begin ] stop
				 */

				/**
				 * [tPostgresqlRow_5 main ] start
				 */

				currentComponent = "tPostgresqlRow_5";

				query_tPostgresqlRow_5 = "INSERT INTO financiera.rubro_rubro (rubro_padre, rubro_hijo) SELECT r1.id, r2.id FROM\n(SELECT padre, codigo\nFROM\n(SELEC"
						+ "T financiera.rubro.*, (regexp_matches (codigo, '^(([0-9]*){1}(-[0-9]*){4})'))[1] AS padre FROM financiera.rubro WHERE co"
						+ "digo ~ '^([0-9]*){1}(-[0-9]*){5}$' ORDER BY codigo) tabla_1\nORDER BY padre) tabla1,\nfinanciera.rubro r1, financiera.rubr"
						+ "o r2 \nWHERE r1.codigo = tabla1.padre AND r2.codigo = tabla1.codigo;";
				whetherReject_tPostgresqlRow_5 = false;
				globalMap.put("tPostgresqlRow_5_QUERY", query_tPostgresqlRow_5);
				try {
					stmt_tPostgresqlRow_5.execute(query_tPostgresqlRow_5);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_5 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tPostgresqlRow_5++;
				if (commitEvery_tPostgresqlRow_5 <= commitCounter_tPostgresqlRow_5) {

					conn_tPostgresqlRow_5.commit();

					commitCounter_tPostgresqlRow_5 = 0;
				}

				tos_count_tPostgresqlRow_5++;

				/**
				 * [tPostgresqlRow_5 main ] stop
				 */

				/**
				 * [tPostgresqlRow_5 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlRow_5";

				/**
				 * [tPostgresqlRow_5 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlRow_5 process_data_end ] start
				 */

				currentComponent = "tPostgresqlRow_5";

				/**
				 * [tPostgresqlRow_5 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlRow_5 end ] start
				 */

				currentComponent = "tPostgresqlRow_5";

				stmt_tPostgresqlRow_5.close();
				if (commitEvery_tPostgresqlRow_5 > commitCounter_tPostgresqlRow_5) {

					conn_tPostgresqlRow_5.commit();

					commitCounter_tPostgresqlRow_5 = 0;

				}
				conn_tPostgresqlRow_5.close();

				ok_Hash.put("tPostgresqlRow_5", true);
				end_Hash.put("tPostgresqlRow_5", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRow_5 finally ] start
				 */

				currentComponent = "tPostgresqlRow_5";

				/**
				 * [tPostgresqlRow_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRow_5_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_6 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_6", false);
				start_Hash.put("tPostgresqlRow_6", System.currentTimeMillis());

				currentComponent = "tPostgresqlRow_6";

				int tos_count_tPostgresqlRow_6 = 0;

				class BytesLimit65535_tPostgresqlRow_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostgresqlRow_6().limitLog4jByte();

				java.sql.Connection conn_tPostgresqlRow_6 = null;
				String query_tPostgresqlRow_6 = "";
				boolean whetherReject_tPostgresqlRow_6 = false;
				String driverClass_tPostgresqlRow_6 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlRow_6);

				String url_tPostgresqlRow_6 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "test";

				String dbUser_tPostgresqlRow_6 = "test";

				final String decryptedPassword_tPostgresqlRow_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("f3e656537b1a4d67");

				String dbPwd_tPostgresqlRow_6 = decryptedPassword_tPostgresqlRow_6;

				conn_tPostgresqlRow_6 = java.sql.DriverManager.getConnection(
						url_tPostgresqlRow_6, dbUser_tPostgresqlRow_6,
						dbPwd_tPostgresqlRow_6);

				if (conn_tPostgresqlRow_6.getAutoCommit()) {

					conn_tPostgresqlRow_6.setAutoCommit(false);

				}
				int commitEvery_tPostgresqlRow_6 = 10000;
				int commitCounter_tPostgresqlRow_6 = 0;

				java.sql.Statement stmt_tPostgresqlRow_6 = conn_tPostgresqlRow_6
						.createStatement();

				/**
				 * [tPostgresqlRow_6 begin ] stop
				 */

				/**
				 * [tPostgresqlRow_6 main ] start
				 */

				currentComponent = "tPostgresqlRow_6";

				query_tPostgresqlRow_6 = "INSERT INTO financiera.rubro_rubro (rubro_padre, rubro_hijo) SELECT r1.id, r2.id FROM\n(SELECT padre, codigo\nFROM\n(SELEC"
						+ "T financiera.rubro.*, (regexp_matches (codigo, '^(([0-9]*){1}(-[0-9]*){5})'))[1] AS padre FROM financiera.rubro WHERE co"
						+ "digo ~ '^([0-9]*){1}(-[0-9]*){6}$' ORDER BY codigo) tabla_1\nORDER BY padre) tabla1,\nfinanciera.rubro r1, financiera.rubr"
						+ "o r2 \nWHERE r1.codigo = tabla1.padre AND r2.codigo = tabla1.codigo;";
				whetherReject_tPostgresqlRow_6 = false;
				globalMap.put("tPostgresqlRow_6_QUERY", query_tPostgresqlRow_6);
				try {
					stmt_tPostgresqlRow_6.execute(query_tPostgresqlRow_6);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_6 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tPostgresqlRow_6++;
				if (commitEvery_tPostgresqlRow_6 <= commitCounter_tPostgresqlRow_6) {

					conn_tPostgresqlRow_6.commit();

					commitCounter_tPostgresqlRow_6 = 0;
				}

				tos_count_tPostgresqlRow_6++;

				/**
				 * [tPostgresqlRow_6 main ] stop
				 */

				/**
				 * [tPostgresqlRow_6 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlRow_6";

				/**
				 * [tPostgresqlRow_6 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlRow_6 process_data_end ] start
				 */

				currentComponent = "tPostgresqlRow_6";

				/**
				 * [tPostgresqlRow_6 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlRow_6 end ] start
				 */

				currentComponent = "tPostgresqlRow_6";

				stmt_tPostgresqlRow_6.close();
				if (commitEvery_tPostgresqlRow_6 > commitCounter_tPostgresqlRow_6) {

					conn_tPostgresqlRow_6.commit();

					commitCounter_tPostgresqlRow_6 = 0;

				}
				conn_tPostgresqlRow_6.close();

				ok_Hash.put("tPostgresqlRow_6", true);
				end_Hash.put("tPostgresqlRow_6", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRow_6 finally ] start
				 */

				currentComponent = "tPostgresqlRow_6";

				/**
				 * [tPostgresqlRow_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRow_6_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_7 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_7", false);
				start_Hash.put("tPostgresqlRow_7", System.currentTimeMillis());

				currentComponent = "tPostgresqlRow_7";

				int tos_count_tPostgresqlRow_7 = 0;

				class BytesLimit65535_tPostgresqlRow_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostgresqlRow_7().limitLog4jByte();

				java.sql.Connection conn_tPostgresqlRow_7 = null;
				String query_tPostgresqlRow_7 = "";
				boolean whetherReject_tPostgresqlRow_7 = false;
				String driverClass_tPostgresqlRow_7 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlRow_7);

				String url_tPostgresqlRow_7 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "test";

				String dbUser_tPostgresqlRow_7 = "test";

				final String decryptedPassword_tPostgresqlRow_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("f3e656537b1a4d67");

				String dbPwd_tPostgresqlRow_7 = decryptedPassword_tPostgresqlRow_7;

				conn_tPostgresqlRow_7 = java.sql.DriverManager.getConnection(
						url_tPostgresqlRow_7, dbUser_tPostgresqlRow_7,
						dbPwd_tPostgresqlRow_7);

				if (conn_tPostgresqlRow_7.getAutoCommit()) {

					conn_tPostgresqlRow_7.setAutoCommit(false);

				}
				int commitEvery_tPostgresqlRow_7 = 10000;
				int commitCounter_tPostgresqlRow_7 = 0;

				java.sql.Statement stmt_tPostgresqlRow_7 = conn_tPostgresqlRow_7
						.createStatement();

				/**
				 * [tPostgresqlRow_7 begin ] stop
				 */

				/**
				 * [tPostgresqlRow_7 main ] start
				 */

				currentComponent = "tPostgresqlRow_7";

				query_tPostgresqlRow_7 = "INSERT INTO financiera.rubro_rubro (rubro_padre, rubro_hijo) SELECT r1.id, r2.id FROM\n(SELECT padre, codigo\nFROM\n(SELEC"
						+ "T financiera.rubro.*, (regexp_matches (codigo, '^(([0-9]*){1}(-[0-9]*){6})'))[1] AS padre FROM financiera.rubro WHERE co"
						+ "digo ~ '^([0-9]*){1}(-[0-9]*){7}$' ORDER BY codigo) tabla_1\nORDER BY padre) tabla1,\nfinanciera.rubro r1, financiera.rubr"
						+ "o r2 \nWHERE r1.codigo = tabla1.padre AND r2.codigo = tabla1.codigo;";
				whetherReject_tPostgresqlRow_7 = false;
				globalMap.put("tPostgresqlRow_7_QUERY", query_tPostgresqlRow_7);
				try {
					stmt_tPostgresqlRow_7.execute(query_tPostgresqlRow_7);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_7 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tPostgresqlRow_7++;
				if (commitEvery_tPostgresqlRow_7 <= commitCounter_tPostgresqlRow_7) {

					conn_tPostgresqlRow_7.commit();

					commitCounter_tPostgresqlRow_7 = 0;
				}

				tos_count_tPostgresqlRow_7++;

				/**
				 * [tPostgresqlRow_7 main ] stop
				 */

				/**
				 * [tPostgresqlRow_7 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlRow_7";

				/**
				 * [tPostgresqlRow_7 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlRow_7 process_data_end ] start
				 */

				currentComponent = "tPostgresqlRow_7";

				/**
				 * [tPostgresqlRow_7 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlRow_7 end ] start
				 */

				currentComponent = "tPostgresqlRow_7";

				stmt_tPostgresqlRow_7.close();
				if (commitEvery_tPostgresqlRow_7 > commitCounter_tPostgresqlRow_7) {

					conn_tPostgresqlRow_7.commit();

					commitCounter_tPostgresqlRow_7 = 0;

				}
				conn_tPostgresqlRow_7.close();

				ok_Hash.put("tPostgresqlRow_7", true);
				end_Hash.put("tPostgresqlRow_7", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRow_7 finally ] start
				 */

				currentComponent = "tPostgresqlRow_7";

				/**
				 * [tPostgresqlRow_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRow_7_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ajuste_arbol ajuste_arbolClass = new ajuste_arbol();

		int exitCode = ajuste_arbolClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ajuste_arbol.class.getClassLoader()
					.getResourceAsStream(
							"migraciones/ajuste_arbol_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = ajuste_arbol.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlRow_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlRow_1) {
			globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", -1);

			e_tPostgresqlRow_1.printStackTrace();

		}
		try {
			errorCode = null;
			tPostgresqlRow_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlRow_2) {
			globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", -1);

			e_tPostgresqlRow_2.printStackTrace();

		}
		try {
			errorCode = null;
			tPostgresqlRow_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlRow_3) {
			globalMap.put("tPostgresqlRow_3_SUBPROCESS_STATE", -1);

			e_tPostgresqlRow_3.printStackTrace();

		}
		try {
			errorCode = null;
			tPostgresqlRow_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlRow_4) {
			globalMap.put("tPostgresqlRow_4_SUBPROCESS_STATE", -1);

			e_tPostgresqlRow_4.printStackTrace();

		}
		try {
			errorCode = null;
			tPostgresqlRow_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlRow_5) {
			globalMap.put("tPostgresqlRow_5_SUBPROCESS_STATE", -1);

			e_tPostgresqlRow_5.printStackTrace();

		}
		try {
			errorCode = null;
			tPostgresqlRow_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlRow_6) {
			globalMap.put("tPostgresqlRow_6_SUBPROCESS_STATE", -1);

			e_tPostgresqlRow_6.printStackTrace();

		}
		try {
			errorCode = null;
			tPostgresqlRow_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlRow_7) {
			globalMap.put("tPostgresqlRow_7_SUBPROCESS_STATE", -1);

			e_tPostgresqlRow_7.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : ajuste_arbol");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 61422 characters generated by Talend Open Studio for Data Integration on the
 * October 10, 2018 11:20:55 AM COT
 ************************************************************************************************/
